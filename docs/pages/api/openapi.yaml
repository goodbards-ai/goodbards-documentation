---
openapi: 3.0.3
info:
  title: GoodBards Backend API
  version: "1.0"
tags:
- name: Agentic AI
  description: Interact with the Agentic AI
- name: Calendar
  description: Calendar Resource API
- name: Case Management
  description: Manage Documents for user
- name: ChatBot
  description: Interact with the ChatBot
- name: Configuration
  description: Tenant Configuration
- name: Content Edition
  description: Format and adapt content
- name: Copilot AI
  description: Artificial Intelligence assistant for Marketing
- name: Document Management
  description: Manage Documents for user
- name: Email Marketing
  description: Build and Send Emails
- name: Generative AI
  description: Artificial Intelligence for Generative Design
- name: Identity and Access Management
  description: Services for Authentication and Authorization
- name: Infra
  description: Administration of the infrastructure
- name: Integrations
  description: Integration with third parties
- name: Process Engine
  description: Process Execution
- name: Public
  description: Service for non authenticated users
- name: Referential
  description: Referential Data
- name: Social Media
  description: 'Interact with social Media '
- name: Customer Data Platform
- name: Expose Images
- name: Tools
paths:
  /s/{shortCode}:
    get:
      tags:
      - Url Redirect Resource
      parameters:
      - name: shortCode
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v1/ai/models:
    get:
      tags:
      - Generative AI
      summary: List all styles
      description: Retrieving all the ai models.
      parameters:
      - name: name
        in: query
        schema:
          type: string
      - name: provider
        in: query
        schema:
          type: string
      - name: type
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AiModel"
  /v1/ai/prompts:
    get:
      tags:
      - Generative AI
      summary: List prompts and filter by category
      parameters:
      - name: category
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/ai/prompts/categories:
    get:
      tags:
      - Generative AI
      summary: List prompts grouped by category
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/ai/prompts/{prompt-definition-id}:
    get:
      tags:
      - Generative AI
      summary: Find a prompt definition by id
      parameters:
      - name: prompt-definition-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    put:
      tags:
      - Generative AI
      summary: Update a Prompt definition
      parameters:
      - name: prompt-definition-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpsertPromptRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Generative AI
      summary: Find a prompt definition by id
      parameters:
      - name: prompt-definition-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/cases/definitions:
    get:
      tags:
      - Case Management
      summary: List all case definitions (verbose)
      description: List all case definitions.
      responses:
        "200":
          description: Business domains
          content:
            application/json:
              schema:
                type: array
                items: {}
        "500":
          description: Internal Server Error
          content:
            application/json: {}
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/cases/definitions/{case-definition-id}:
    get:
      tags:
      - Case Management
      summary: Details for a Case definition
      description: Details for a Case definition
      parameters:
      - name: case-definition-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: Business Cases
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CaseDefinition"
        "404":
          description: Business Case not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "400":
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "500":
          description: Internal Server Error
          content:
            application/json: {}
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/cases/{tenant-id}/definitions:
    get:
      tags:
      - Case Management
      summary: List all case definitions (verbose)
      description: List all case definitions.
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: Business domains
          content:
            application/json:
              schema:
                type: array
                items: {}
        "500":
          description: Internal Server Error
          content:
            application/json: {}
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/email/contents:
    get:
      tags:
      - Email Marketing
      summary: List contents for the platform
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Email Marketing
      summary: Create a content
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailContent"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/email/contents/{content-id}:
    get:
      tags:
      - Email Marketing
      summary: Retrieve details for a content
      parameters:
      - name: content-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    put:
      tags:
      - Email Marketing
      summary: Update an existing content
      parameters:
      - name: content-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailContent"
      responses:
        "202":
          description: content information has been updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserTenant"
        "401":
          description: User is not authenticated or token has expired
          content:
            application/json: {}
        "403":
          description: 'User Cannot access the tenant '
          content:
            application/json: {}
        "404":
          description: company not found
          content:
            application/json: {}
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Email Marketing
      summary: Delete a content from its id
      parameters:
      - name: content-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/email/contents/{content-id}/deploy/{tenant-id}:
    post:
      tags:
      - Email Marketing
      summary: Deploy a Content to a Tenant
      parameters:
      - name: content-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/email/contents/{content-id}/undeploy/{tenant-id}:
    post:
      tags:
      - Email Marketing
      summary: UnDeploy Content from a Tenant
      parameters:
      - name: content-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/email/designs:
    get:
      tags:
      - Email Marketing
      summary: List designs  for the platform
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Email Marketing
      summary: Create a design
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailDesign"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/email/designs/{design-id}:
    get:
      tags:
      - Email Marketing
      summary: Retrieve details for a design
      parameters:
      - name: design-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    put:
      tags:
      - Email Marketing
      summary: Update an existing design
      parameters:
      - name: design-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailDesign"
      responses:
        "202":
          description: design information has been updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserTenant"
        "401":
          description: User is not authenticated or token has expired
          content:
            application/json: {}
        "403":
          description: 'User Cannot access the tenant '
          content:
            application/json: {}
        "404":
          description: company not found
          content:
            application/json: {}
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Email Marketing
      summary: Delete a design from its id
      parameters:
      - name: design-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/email/designs/{design-id}/deploy/{tenant-id}:
    post:
      tags:
      - Email Marketing
      summary: Deploy a Design to a Tenant
      parameters:
      - name: design-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/email/designs/{design-id}/undeploy/{tenant-id}:
    post:
      tags:
      - Email Marketing
      summary: UnDeploy Design from a Tenant
      parameters:
      - name: design-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/iam/avatars/{user}:
    get:
      tags:
      - Identity and Access Management
      summary: Retrieve user avatar thumbnail as a base64 encoded string
      parameters:
      - name: user
        in: path
        description: "Identifier of the user, uid or email"
        required: true
        schema:
          type: string
        example: cedrick@goodbards.com
      responses:
        "200":
          description: Base64 encoded avatar image
          content:
            text/plain:
              schema:
                type: string
        "400":
          description: Invalid user ID provided
          content:
            application/json: {}
        "401":
          description: User is not authenticated or token has expired
          content:
            application/json: {}
        "403":
          description: User does not have permission to access this avatar
          content:
            application/json: {}
        "404":
          description: User not found
          content:
            application/json: {}
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
      security:
      - SecurityScheme: []
  /v1/iam/claims:
    get:
      tags:
      - Identity and Access Management
      summary: Retrieve and parse user claims from JWToken
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsJwtClaims"
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/iam/login:
    post:
      tags:
      - Identity and Access Management
      summary: Authenticate a user against the platform
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Credentials"
      responses:
        "200":
          description: 'User is authenticated '
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsUser"
        "400":
          description: Credential not properly formatted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "403":
          description: User does not have permission to access the system
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
  /v1/iam/login-2fa:
    post:
      tags:
      - Identity and Access Management
      summary: "Authenticate a user against the platform, second step (validation\
        \ and user code)"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Credentials2fa"
      responses:
        "200":
          description: 'User is authenticated '
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsUser"
        "400":
          description: Credentials not properly formatted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "401":
          description: Invalid credentials 2FA
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "403":
          description: User does not have permission to access the system
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
  /v1/iam/register:
    post:
      tags:
      - Identity and Access Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistrationRequest"
      responses:
        "200":
          description: OK
  /v1/iam/register-admin-validation:
    get:
      tags:
      - Identity and Access Management
      parameters:
      - name: action
        in: query
        schema:
          $ref: "#/components/schemas/UUID"
      - name: admin
        in: query
        schema:
          type: string
      - name: decision
        in: query
        schema:
          type: string
      - name: email
        in: query
        schema:
          type: string
      - name: lang
        in: query
        schema:
          type: string
      - name: verificationCode
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v1/iam/register-email-validation:
    get:
      tags:
      - Identity and Access Management
      parameters:
      - name: action
        in: query
        schema:
          $ref: "#/components/schemas/UUID"
      - name: email
        in: query
        schema:
          type: string
      - name: lang
        in: query
        schema:
          type: string
      - name: verificationCode
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v1/iam/renew-token:
    get:
      tags:
      - Identity and Access Management
      summary: Renew a token based on the token provided
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsJwtClaims"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "403":
          description: User is not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
      security:
      - SecurityScheme: []
  /v1/iam/users:
    get:
      tags:
      - Identity and Access Management
      summary: List all users with their roles (light)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GoodBardsUserLight"
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/iam/users/change-email:
    post:
      tags:
      - Identity and Access Management
      summary: Reinit User email
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeEmailRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/iam/users/change-email-otp:
    post:
      tags:
      - Identity and Access Management
      summary: Reinit User email with OTP
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeEmailRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/iam/users/change-email-otp-validation:
    post:
      tags:
      - Identity and Access Management
      summary: Reinit User email
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeEmailValidationRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/iam/users/reset-password:
    post:
      tags:
      - Identity and Access Management
      summary: Initialize password reset process
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPasswordRequest"
      responses:
        "202":
          description: Request accepted
          content:
            application/json: {}
        "400":
          description: Invalid password information
          content:
            application/json: {}
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
  /v1/iam/users/{user-id}:
    delete:
      tags:
      - Identity and Access Management
      summary: Delete a user from its id
      parameters:
      - name: user-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/iam/users/{user-id}/answer-security-question:
    post:
      tags:
      - Identity and Access Management
      summary: Change user password question
      parameters:
      - name: user-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnswerSecurityQuestionRequest"
      responses:
        "202":
          description: Update accepted
          content:
            application/json: {}
        "400":
          description: Invalid password information
          content:
            application/json: {}
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/iam/users/{user-id}/change-email-validation:
    get:
      tags:
      - Identity and Access Management
      parameters:
      - name: user-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: action
        in: query
        schema:
          $ref: "#/components/schemas/UUID"
      - name: code
        in: query
        schema:
          type: string
      - name: lang
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v1/iam/users/{user-id}/reset-password-validation:
    get:
      tags:
      - Identity and Access Management
      summary: Validate code for reset password flow
      parameters:
      - name: user-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: action
        in: query
        schema:
          $ref: "#/components/schemas/UUID"
      - name: code
        in: query
        schema:
          type: string
      - name: lang
        in: query
        schema:
          type: string
      responses:
        "200":
          description: The link is valid
          content:
            text/html:
              schema:
                type: string
        "400":
          description: Invalid password information
          content:
            application/json: {}
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
  /v1/iam/users/{user-id}/update-account-settings:
    post:
      tags:
      - Identity and Access Management
      summary: Change user global settings and return new token with new claims
      parameters:
      - name: user-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAccountSettingsRequest"
      responses:
        "202":
          description: Update accepted
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Invalid password information
          content:
            application/json: {}
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/iam/users/{user-id}/update-avatar:
    post:
      tags:
      - Identity and Access Management
      summary: Update a user avatar
      parameters:
      - name: user-id
        in: path
        description: User unique identifier for the platform
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: height
        in: query
        schema:
          format: int32
          type: integer
      - name: width
        in: query
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAvatarRequest"
      responses:
        "202":
          description: Update accepted
          content:
            application/json: {}
        "400":
          description: Invalid avatar format
          content:
            application/json: {}
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "403":
          description: User is not authorized for this feature
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
      security:
      - SecurityScheme: []
  /v1/iam/users/{user-id}/update-language:
    post:
      tags:
      - Identity and Access Management
      summary: Update the preferred user language
      parameters:
      - name: user-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAccountSettingsRequest"
      responses:
        "202":
          description: Update accepted
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Invalid language information
          content:
            application/json: {}
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/iam/users/{user-id}/update-password:
    post:
      tags:
      - Identity and Access Management
      summary: Change user password
      parameters:
      - name: user-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequest"
      responses:
        "202":
          description: Update accepted
          content:
            application/json: {}
        "400":
          description: Invalid password information
          content:
            application/json: {}
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/iam/users/{user-id}/update-theme:
    post:
      tags:
      - Identity and Access Management
      summary: Update Theme for the user
      parameters:
      - name: user-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAccountSettingsRequest"
      responses:
        "202":
          description: Update accepted
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Invalid password information
          content:
            application/json: {}
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/iam/users/{user}:
    get:
      tags:
      - Identity and Access Management
      summary: Find user by uuid or email with its access control list
      parameters:
      - name: user
        in: path
        description: "Identifier of the user, uid or email"
        required: true
        schema:
          type: string
        example: cedrick@goodbards.com
      responses:
        "200":
          description: 'User '
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsUser"
        "400":
          description: Invalid user ID provided
          content:
            application/json: {}
        "401":
          description: User is not authenticated or token has expired
          content:
            application/json: {}
        "403":
          description: User does not have permission to access this avatar
          content:
            application/json: {}
        "404":
          description: User not found
          content:
            application/json: {}
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
      security:
      - SecurityScheme: []
  /v1/iam/valid-registration:
    post:
      tags:
      - Identity and Access Management
      parameters:
      - name: user
        in: query
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/iam/{tenant-id}/users:
    get:
      tags:
      - Identity and Access Management
      summary: List users for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: Returned the list of users for the tenant
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserTenant"
        "401":
          description: User is not authenticated or token has expired
          content:
            application/json: {}
        "403":
          description: 'User Cannot access the tenant '
          content:
            application/json: {}
        "404":
          description: Tenant not found
          content:
            application/json: {}
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
      security:
      - SecurityScheme: []
  /v1/infra/tenants:
    get:
      tags:
      - Infra
      summary: List all tenants
      description: Retrieving all the available tenants.
      responses:
        "200":
          description: List all tenants
          content:
            application/json:
              schema:
                type: array
                items: {}
        "500":
          description: Internal Server Error
          content:
            text/plain: {}
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/infra/tenants/{tenant-id}/events:
    get:
      tags:
      - Infra
      summary: List events for a tenants
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: limit
        in: query
        description: Optional max number of events
        schema:
          format: int32
          type: integer
        example: 20
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Infra
      summary: Push a new event
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/integrations/definitions:
    get:
      tags:
      - Integrations
      summary: List integration definitions (meta) for Goodbards
      description: List available connectors in the platform
      responses:
        "200":
          description: Connectors list
          content:
            application/json:
              schema:
                type: array
                items: {}
        "500":
          description: Internal Server Error
          content:
            application/json: {}
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/integrations/definitions/{integration-id}:
    get:
      tags:
      - Integrations
      summary: Show details for integration definitions (meta) for Goodbards
      description: Show details for an integrations/connector
      parameters:
      - name: integration-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Integration Definition
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntegrationDefinition"
        "404":
          description: Integration Definition not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "400":
          description: Integration parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "500":
          description: Integration Server Error
          content:
            application/json: {}
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/processes/definitions:
    get:
      tags:
      - Process Engine
      summary: 'List Process definitions (verbose) '
      description: 'Get Process list '
      responses:
        "200":
          description: Process Definitions
          content:
            application/json:
              schema:
                type: array
                items: {}
        "500":
          description: Internal Server Error
          content:
            application/json: {}
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/processes/definitions/{process-definition-id}:
    get:
      tags:
      - Process Engine
      summary: Show definition of a Process
      description: Get details for a Process definitions
      parameters:
      - name: process-definition-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: Process Definition
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessDefinition"
        "404":
          description: Process Definition not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "400":
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "500":
          description: Internal Server Error
          content:
            application/json: {}
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/public/contact-us:
    post:
      tags:
      - Public
      summary: Submit the contact us form
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/ContactUsForm"
      responses:
        "200":
          description: OK
  /v1/public/notify-me:
    post:
      tags:
      - Public
      summary: Register a user to the wait list
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        "200":
          description: Request Accepted
  /v1/ref:
    get:
      tags:
      - Referential
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  type: string
  /v1/ref/asset-types:
    get:
      tags:
      - Referential
      summary: List all assets types for all tactics
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReferentialAssetType"
  /v1/ref/asset-types/{marketing-tactic}:
    get:
      tags:
      - Referential
      summary: List all assets types for a tactic
      parameters:
      - name: marketing-tactic
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReferentialAssetType"
  /v1/ref/audiences:
    get:
      tags:
      - Referential
      summary: Search for cities with options filters
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    $ref: "#/components/schemas/ReferentialEntry"
  /v1/ref/audiences/{audience-type}:
    get:
      tags:
      - Referential
      summary: Search for cities with options filters
      parameters:
      - name: audience-type
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReferentialEntry"
  /v1/ref/cities:
    get:
      tags:
      - Referential
      summary: Search for cities with options filters
      parameters:
      - name: contains
        in: query
        schema:
          type: string
      - name: countries
        in: query
        schema:
          type: string
      - name: limit
        in: query
        schema:
          format: int32
          type: integer
      - name: regions
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReferentialCity"
  /v1/ref/currencies:
    get:
      tags:
      - Referential
      summary: List all currencies
      description: Retrieving all the available currencies.
      responses:
        "200":
          description: Referential list of currencies
          content:
            application/json:
              schema:
                type: array
                items: {}
        "500":
          description: Internal Server Error
          content:
            text/plain: {}
  /v1/ref/languages:
    get:
      tags:
      - Referential
      summary: List all languages
      description: Retrieving all the available languages.
      responses:
        "200":
          description: Referential list of languages
          content:
            application/json:
              schema:
                type: array
                items: {}
        "500":
          description: Internal Server Error
          content:
            text/plain: {}
  /v1/ref/marketing-objectives:
    get:
      tags:
      - Referential
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReferentialEntry"
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/ref/marketing-tactics:
    get:
      tags:
      - Referential
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReferentialEntry"
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/ref/permissions:
    get:
      tags:
      - Referential
      summary: Search for permissions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReferentialEntry"
  /v1/ref/regions-with-countries:
    get:
      tags:
      - Referential
      summary: List all regions and all countries
      responses:
        "200":
          description: Referential list of currencies
          content:
            application/json:
              schema:
                type: array
                items: {}
        "500":
          description: Internal Server Error
          content:
            text/plain: {}
  /v1/ref/regions-with-countries/{region}:
    get:
      tags:
      - Referential
      summary: List all regions and all countries
      parameters:
      - name: region
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Referential list of currencies
          content:
            application/json:
              schema:
                type: array
                items: {}
        "500":
          description: Internal Server Error
          content:
            text/plain: {}
  /v1/ref/roles:
    get:
      tags:
      - Referential
      summary: Search for permissions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReferentialEntry"
  /v1/ref/timezone:
    get:
      tags:
      - Referential
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/ref/{list-name}:
    get:
      tags:
      - Referential
      parameters:
      - name: list-name
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReferentialEntry"
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/ref/{list-name}/{key-name}:
    get:
      tags:
      - Referential
      parameters:
      - name: key-name
        in: path
        required: true
        schema:
          type: string
      - name: list-name
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/steps/definitions/{step-definition-id}:
    get:
      tags:
      - Process Engine
      summary: Show definition of a Process
      description: Get details for a Process definitions
      parameters:
      - name: step-definition-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: Step Definition
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StepDefinition"
        "404":
          description: Step Definition not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "400":
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "500":
          description: Internal Server Error
          content:
            application/json: {}
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/agents:
    get:
      tags:
      - Agentic AI
      summary: List agents for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Agentic AI
      summary: Create an Agent and deploy in tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AiAgentDefinitionWithPrompt"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/agents/generate-welcome-message:
    post:
      tags:
      - Agentic AI
      summary: Generate a welcome message for an agent
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AiAgentWelcomeMessageRequest"
      responses:
        "200":
          description: OK
  /v1/{tenant-id}/ai/agents/{agent-id}:
    delete:
      tags:
      - Agentic AI
      summary: Delete an agent (undeploy it is a template and non admin permissions)
      parameters:
      - name: agent-id
        in: path
        required: true
        schema:
          type: string
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/agents/{agent-uid}:
    get:
      tags:
      - Agentic AI
      summary: Find an agent by id
      parameters:
      - name: agent-uid
        in: path
        required: true
        schema:
          type: string
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    put:
      tags:
      - Agentic AI
      summary: Update Agent deploy in tenant
      parameters:
      - name: agent-uid
        in: path
        required: true
        schema:
          type: string
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AiAgentDefinitionWithPrompt"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/agents/{agent-uid}/audio:
    get:
      tags:
      - Agentic AI
      parameters:
      - name: agent-uid
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
          content:
            audio/mpeg:
              schema:
                format: binary
                type: string
  /v1/{tenant-id}/ai/agents/{agent-uid}/avatar:
    get:
      tags:
      - Agentic AI
      summary: Find an agent by id
      parameters:
      - name: agent-uid
        in: path
        required: true
        schema:
          type: string
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/content-generation:
    post:
      tags:
      - Generative AI
      summary: Generate content based on a dynamic prompt
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContentGenerationRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/content-generation-prompt:
    post:
      tags:
      - Generative AI
      summary: Generate content based on a dynamic prompt
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContentGenerationRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/content-generation/streaming-init:
    post:
      tags:
      - Generative AI
      summary: Generate content based on a dynamic prompt
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContentGenerationRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/content-generation/streaming/{sessionId}:
    get:
      tags:
      - Generative AI
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/PublisherString"
  /v1/{tenant-id}/ai/content-improvement:
    post:
      tags:
      - Generative AI
      summary: Generate Improvement based on a dynamic prompt
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContentImprovementRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/copilot/tactics:
    get:
      tags:
      - Copilot AI
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: campaignUid
        in: query
        schema:
          type: string
      - name: code
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/generate-image:
    post:
      tags:
      - Generative AI
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateImageRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/generated/content:
    get:
      tags:
      - Generative AI
      summary: List generated content for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/generated/content/{content-id}:
    get:
      tags:
      - Generative AI
      summary: Display one generated content
      parameters:
      - name: content-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Generative AI
      summary: Delete one content
      parameters:
      - name: content-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/index-document/{uid}:
    post:
      tags:
      - Generative AI
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: uid
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: llm
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/models:
    get:
      tags:
      - Generative AI
      summary: List models for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: name
        in: query
        schema:
          type: string
      - name: provider
        in: query
        schema:
          type: string
      - name: type
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/models/chat-assistant:
    get:
      tags:
      - Generative AI
      summary: List models for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: provider
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/models/image-generation:
    get:
      tags:
      - Generative AI
      summary: List models for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: provider
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/models/providers-chat:
    get:
      tags:
      - Generative AI
      summary: List models for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/models/providers-image:
    get:
      tags:
      - Generative AI
      summary: List models for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/prompts:
    get:
      tags:
      - Generative AI
      summary: List prompts for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: category
        in: query
        schema:
          type: string
      - name: tactic
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/prompts/variables:
    get:
      tags:
      - Generative AI
      summary: List prompt variables with default values for the tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Generative AI
      summary: Create a new prompt variable
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PromptVariableDefinition"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/prompts/variables/{variable-name}:
    get:
      tags:
      - Generative AI
      summary: Get a variable by name
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: variable-name
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    put:
      tags:
      - Generative AI
      summary: Create a new prompt variable
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: variable-name
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PromptVariableDefinition"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Generative AI
      summary: Delete a variable by name
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: variable-name
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/prompts/{prompt-definition-id}:
    get:
      tags:
      - Generative AI
      summary: Find a prompt definition by id
      parameters:
      - name: prompt-definition-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    put:
      tags:
      - Generative AI
      summary: Update Prompt definition
      parameters:
      - name: prompt-definition-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpsertPromptRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/prompts/{prompt-definition-id}/copy:
    post:
      tags:
      - Generative AI
      summary: Find a prompt definition by id
      parameters:
      - name: prompt-definition-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CopyPromptRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/prompts/{prompt-definition-id}/deploy:
    post:
      tags:
      - Generative AI
      summary: Find a prompt definition by id
      parameters:
      - name: prompt-definition-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/rag/configs:
    get:
      tags:
      - Generative AI
      summary: List rags configurations for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/rag/configs/{config-id}:
    get:
      tags:
      - Generative AI
      summary: Details fo one configuration
      parameters:
      - name: config-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/rag/sources:
    get:
      tags:
      - Generative AI
      summary: List rags sources for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/rag/sources/{source-id}:
    get:
      tags:
      - Generative AI
      summary: Details fo one source
      parameters:
      - name: source-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/rag/stores:
    get:
      tags:
      - Generative AI
      summary: List rags configurations for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/rag/stores/{store-name}:
    get:
      tags:
      - Generative AI
      summary: List rags configurations for a tenant
      parameters:
      - name: store-name
        in: path
        required: true
        schema:
          type: string
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/sessions:
    get:
      tags:
      - Agentic AI
      summary: "List ai sessions for current tenant, filtering by agent"
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: agent-id
        in: query
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Agentic AI
      summary: Create a session
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSessionRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/sessions/{session-id}:
    get:
      tags:
      - Agentic AI
      summary: Find a unique ai session hat by its Id (metadata)
      parameters:
      - name: session-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Agentic AI
      summary: "Delete a session and all its messages, context, actions"
      parameters:
      - name: session-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/sessions/{session-id}/change-agent:
    post:
      tags:
      - Agentic AI
      summary: Change the agent of current chat
      parameters:
      - name: session-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeAgentRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/sessions/{session-id}/events:
    get:
      tags:
      - Agentic AI
      summary: Show the events of a chat
      parameters:
      - name: session-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Agentic AI
      summary: Delete all keys for a session
      parameters:
      - name: session-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/sessions/{session-id}/events/{event-id}:
    get:
      tags:
      - Agentic AI
      summary: Show details for an event
      parameters:
      - name: event-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: session-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Agentic AI
      summary: Delete Actions Key of a session
      parameters:
      - name: event-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: session-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/sessions/{session-id}/events/{event-id}/acknowledge:
    post:
      tags:
      - Agentic AI
      summary: Add Context Key of a session
      parameters:
      - name: event-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: session-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/sessions/{session-id}/messages:
    get:
      tags:
      - Agentic AI
      summary: Display one one conversation
      parameters:
      - name: session-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: full
        in: query
        schema:
          type: boolean
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Agentic AI
      summary: Create a new message in a conversation
      parameters:
      - name: session-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatMessage"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/sessions/{session-id}/messages/{message-id}:
    delete:
      tags:
      - Agentic AI
      summary: Delete a message
      parameters:
      - name: message-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: session-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/sessions/{session-id}/rename:
    post:
      tags:
      - Agentic AI
      summary: Rename an AI Session
      parameters:
      - name: session-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RenameRequest1"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/sessions/{session-id}/sendMessage:
    post:
      tags:
      - Agentic AI
      summary: Send a message and get a response
      parameters:
      - name: session-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/sessions/{session-id}/sendMessageWS:
    post:
      tags:
      - Agentic AI
      summary: Interact with Ai Assistant using WebSocket
      parameters:
      - name: session-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WSAiSessionEvent"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/sessions/{session-id}/variables:
    get:
      tags:
      - Agentic AI
      summary: Show the variables of a session
      parameters:
      - name: session-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Agentic AI
      summary: Update a set of variables of a session
      parameters:
      - name: session-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeAiSessionVariablesRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Agentic AI
      summary: Delete all keys for a session
      parameters:
      - name: session-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/AiSessionVariable"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/sessions/{session-id}/variables/{key}:
    get:
      tags:
      - Agentic AI
      summary: Get Variable by Key of a session
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: session-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    put:
      tags:
      - Agentic AI
      summary: Add Variable Key of a session
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: session-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Agentic AI
      summary: Delete Variable session
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: session-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/sessions/{session-id}/variables/{key}/recommend:
    post:
      tags:
      - Agentic AI
      summary: Recommend values for a variable
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: session-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecommendVariableRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/suggestions:
    get:
      tags:
      - Agentic AI
      summary: List suggestions for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: agent-id
        in: query
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/ai/unindex-document/{uid}:
    post:
      tags:
      - Generative AI
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: uid
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: llm
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/api-keys:
    get:
      tags:
      - Configuration
      summary: List users for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Configuration
      summary: Create an API key
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateApiKeyRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/api-keys/{api-key-id}:
    delete:
      tags:
      - Configuration
      summary: Delete an API key
      parameters:
      - name: api-key-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/assets:
    get:
      tags:
      - Generative AI
      summary: List assets for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Generative AI
      summary: "Create a new Asset, a version 1 will be created"
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Asset"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/assets/{asset-id}:
    get:
      tags:
      - Generative AI
      summary: "Find an Asset from its id, content is latest version but history is\
        \ also included"
      parameters:
      - name: asset-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    put:
      tags:
      - Generative AI
      summary: "Update an existing Asset, if flag new-version is set to true, a new\
        \ version will be created or existing version updated"
      parameters:
      - name: asset-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: new-version
        in: query
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Asset"
      responses:
        "200":
          description: OK
    delete:
      tags:
      - Generative AI
      summary: Delete an asset and all its versions
      parameters:
      - name: asset-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
  /v1/{tenant-id}/assets/{asset-id}/{version-number}:
    get:
      tags:
      - Generative AI
      summary: Find an Asset Version from its id and version number
      parameters:
      - name: asset-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: version-number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    put:
      tags:
      - Generative AI
      summary: Update a particular version of an asset
      parameters:
      - name: asset-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: version-number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAssetContentRequest"
      responses:
        "200":
          description: OK
    delete:
      tags:
      - Generative AI
      summary: Delete a particular version of a particular asset
      parameters:
      - name: asset-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: version-number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
  /v1/{tenant-id}/calendar:
    get:
      tags:
      - Calendar
      summary: "Show calendar information, events and campaigns for a period"
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: campaignUid
        in: query
        schema:
          $ref: "#/components/schemas/UUID"
      - name: day
        in: query
        schema:
          format: int32
          type: integer
      - name: month
        in: query
        schema:
          format: int32
          type: integer
      - name: tz
        in: query
        schema:
          format: int32
          type: integer
      - name: week
        in: query
        schema:
          format: int32
          type: integer
      - name: year
        in: query
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/calendar/blackouts:
    get:
      tags:
      - Calendar
      summary: List Blackouts
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Calendar
      summary: Create a new blackout period
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CalendarBlackoutPeriod"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/calendar/blackouts/{blackout-id}:
    get:
      tags:
      - Calendar
      summary: Get details of a blackout by Id
      parameters:
      - name: blackout-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Calendar
      summary: Delete a blackout by Id
      parameters:
      - name: blackout-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/calendar/events:
    get:
      tags:
      - Calendar
      summary: List events for a tenant (not tactics)
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Calendar
      summary: Create a new calendar event
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CalendarEvent"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/calendar/events/{event-id}:
    get:
      tags:
      - Calendar
      summary: Get details of a event by Id
      parameters:
      - name: event-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Calendar
      summary: Delete an event by Id
      parameters:
      - name: event-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cases:
    get:
      tags:
      - Case Management
      summary: List cases on a Tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Case Management
      summary: Create a Case on a Tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CaseCreationRequest"
      responses:
        "201":
          description: Case as been Created Cases
          content:
            application/json:
              schema:
                type: array
                items: {}
        "403":
          description: Tenant or permissions forbidden
          content:
            application/json: {}
        "404":
          description: Case not found
          content:
            application/json: {}
        "500":
          description: Internal Server Error
          content:
            application/json: {}
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cases/{case-id}:
    get:
      tags:
      - Case Management
      summary: Show details for a case
      parameters:
      - name: case-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    put:
      tags:
      - Case Management
      summary: Update a campaign
      parameters:
      - name: case-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Case"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Case Management
      summary: Show details for a case
      parameters:
      - name: case-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cases/{case-id}/analytics/reports:
    get:
      tags:
      - Case Management
      summary: List reports for a campaign
      parameters:
      - name: case-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Case Management
      summary: Trigger a job to launch import jobs
      parameters:
      - name: case-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cases/{case-id}/analytics/reports/{report-id}:
    get:
      tags:
      - Case Management
      summary: "Display Analytics Report, report-time could be 'latest' or "
      parameters:
      - name: case-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: report-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cases/{case-id}/analytics/timelines?metrics={metrics}:
    get:
      tags:
      - Case Management
      summary: Show progress of metrics campaign over time
      parameters:
      - name: case-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: metrics
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cases/{case-id}/cancel:
    post:
      tags:
      - Case Management
      summary: Stop a case
      parameters:
      - name: case-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cases/{case-id}/close:
    post:
      tags:
      - Case Management
      summary: Close a Case
      parameters:
      - name: case-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "201":
          description: Process as been Created for case
          content:
            application/json:
              schema:
                type: array
                items: {}
        "403":
          description: Tenant or permissions forbidden
          content:
            application/json: {}
        "404":
          description: Process not found
          content:
            application/json: {}
        "500":
          description: Internal Server Error
          content:
            application/json: {}
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cases/{case-id}/linkDocument:
    post:
      tags:
      - Case Management
      summary: Attach a document to a case variable
      parameters:
      - name: case-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LinkRequest"
      responses:
        "403":
          description: Tenant or permissions forbidden
          content:
            application/json: {}
        "404":
          description: "Variable, Document or case not found"
          content:
            application/json: {}
        "500":
          description: Internal Server Error
          content:
            application/json: {}
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cases/{case-id}/processes:
    post:
      tags:
      - Case Management
      summary: Create a Process for a Case
      parameters:
      - name: case-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartProcessRequest"
      responses:
        "201":
          description: Process as been Created for case
          content:
            application/json:
              schema:
                type: array
                items: {}
        "403":
          description: Tenant or permissions forbidden
          content:
            application/json: {}
        "404":
          description: Process not found
          content:
            application/json: {}
        "500":
          description: Internal Server Error
          content:
            application/json: {}
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cases/{case-id}/reports:
    get:
      tags:
      - Case Management
      summary: List Available Reports for the campaign
      parameters:
      - name: case-id
        in: path
        required: true
        schema:
          type: string
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Case Management
      summary: Create a report for current campaign
      parameters:
      - name: case-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cases/{case-id}/reports/{report-id}:
    get:
      tags:
      - Case Management
      summary: "Display Analytics Report, report-time could be 'latest' or "
      parameters:
      - name: case-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: report-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cases/{case-id}/start:
    post:
      tags:
      - Case Management
      summary: Stop a case
      parameters:
      - name: case-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cases/{case-id}/tactics:
    get:
      tags:
      - Case Management
      summary: List Tactics for a Case
      parameters:
      - name: case-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Case Management
      summary: Create a new tactic
      parameters:
      - name: case-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tactic"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cases/{case-id}/tactics/{tactic-id}:
    get:
      tags:
      - Case Management
      summary: Get Details for a Tactic
      parameters:
      - name: case-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tactic-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    put:
      tags:
      - Case Management
      summary: Update an Existing tactic
      parameters:
      - name: case-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tactic-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tactic"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Case Management
      summary: Delete a new tactic
      parameters:
      - name: case-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tactic-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cases/{case-id}/tactics/{tactic-id}/assets:
    get:
      tags:
      - Case Management
      summary: List Assets for a Tactic
      parameters:
      - name: case-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tactic-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cases/{case-id}/tactics/{tactic-id}/assets/{asset-id}/link:
    post:
      tags:
      - Case Management
      summary: Link Assets and Tactic
      parameters:
      - name: asset-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tactic-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cases/{case-id}/tactics/{tactic-id}/assets/{asset-id}/publish:
    post:
      tags:
      - Case Management
      summary: Publication an asset or an asset version for a tactic
      parameters:
      - name: asset-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: case-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tactic-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PublicationRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cases/{case-id}/tactics/{tactic-id}/assets/{asset-id}/schedule:
    post:
      tags:
      - Case Management
      summary: Schedule the publication of an asset or asset version for a tactic
      parameters:
      - name: asset-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tactic-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScheduleRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cases/{case-id}/tactics/{tactic-id}/assets/{asset-id}/unlink:
    post:
      tags:
      - Case Management
      summary: Disconnect Asset and Tactic
      parameters:
      - name: asset-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tactic-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cases/{case-id}/tactics/{tactic-id}/destinations:
    get:
      tags:
      - Case Management
      summary: Find all destinations for assets in this tactic
      parameters:
      - name: case-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tactic-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cdp/companies:
    get:
      tags:
      - Customer Data Platform
      summary: List companies for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Customer Data Platform
      summary: Create a company for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CdpCompany"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cdp/companies/company-code-exists:
    get:
      tags:
      - Customer Data Platform
      summary: Download Templates as CSV
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: code
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cdp/companies/{company-id}:
    get:
      tags:
      - Customer Data Platform
      summary: Retrieve details for a company (company details)
      parameters:
      - name: company-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    put:
      tags:
      - Customer Data Platform
      summary: Edit a company manually
      parameters:
      - name: company-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CdpCompany"
      responses:
        "202":
          description: company information has been updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserTenant"
        "401":
          description: User is not authenticated or token has expired
          content:
            application/json: {}
        "403":
          description: 'User Cannot access the tenant '
          content:
            application/json: {}
        "404":
          description: company not found
          content:
            application/json: {}
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Customer Data Platform
      summary: Delete a company from its id
      parameters:
      - name: company-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cdp/companies/{company-id}/contacts:
    get:
      tags:
      - Customer Data Platform
      summary: List contacts for a particular company
      parameters:
      - name: company-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cdp/contacts:
    get:
      tags:
      - Customer Data Platform
      summary: List contacts for a tenant (with or without sensitive data)
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: Returned the list of users for the tenant
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserTenant"
        "401":
          description: User is not authenticated or token has expired
          content:
            application/json: {}
        "403":
          description: 'User Cannot access the tenant '
          content:
            application/json: {}
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
      security:
      - SecurityScheme: []
    post:
      tags:
      - Customer Data Platform
      summary: Create a new contact
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CdpContact"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cdp/contacts/bulk-delete:
    post:
      tags:
      - Customer Data Platform
      summary: Delete a contact from its list id
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CdpContactsBulkDeleteRequest"
      responses:
        "204":
          description: Success
          content:
            application/json: {}
        "400":
          description: Invalid user ID provided
          content:
            application/json: {}
        "401":
          description: Contact Not Found
          content:
            application/json: {}
        "403":
          description: 'User Cannot access the tenant '
          content:
            application/json: {}
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cdp/contacts/contact-code-exists:
    get:
      tags:
      - Customer Data Platform
      summary: Download Templates as CSV
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: code
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cdp/contacts/contact-email-exists:
    get:
      tags:
      - Customer Data Platform
      summary: Download Templates as CSV
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: email
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cdp/contacts/download-csv-template:
    get:
      tags:
      - Customer Data Platform
      summary: Download Templates as CSV
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cdp/contacts/export:
    get:
      tags:
      - Customer Data Platform
      summary: Export contacts in a CSV file
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cdp/contacts/{contact-id}:
    get:
      tags:
      - Customer Data Platform
      summary: Retrieve details for a contact (contact details)
      parameters:
      - name: contact-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: Retrieve details for a contact
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserTenant"
        "401":
          description: User is not authenticated or token has expired
          content:
            application/json: {}
        "403":
          description: 'User Cannot access the tenant '
          content:
            application/json: {}
        "404":
          description: Contact not found
          content:
            application/json: {}
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
      security:
      - SecurityScheme: []
    put:
      tags:
      - Customer Data Platform
      summary: Edit a contact manually
      parameters:
      - name: contact-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CdpContact"
      responses:
        "202":
          description: Contact information has been updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserTenant"
        "401":
          description: User is not authenticated or token has expired
          content:
            application/json: {}
        "403":
          description: 'User Cannot access the tenant '
          content:
            application/json: {}
        "404":
          description: Contact not found
          content:
            application/json: {}
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Customer Data Platform
      summary: Delete a contact from its id
      parameters:
      - name: contact-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "204":
          description: Success
          content:
            application/json: {}
        "400":
          description: Invalid user ID provided
          content:
            application/json: {}
        "401":
          description: Contact Not Found
          content:
            application/json: {}
        "403":
          description: 'User Cannot access the tenant '
          content:
            application/json: {}
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cdp/jobs:
    get:
      tags:
      - Customer Data Platform
      summary: List contacts for a tenant (with or without sensitive data)
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cdp/jobs/create-import-contacts:
    post:
      tags:
      - Customer Data Platform
      summary: Create a job to import contact
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  format: binary
                  type: string
                strategy:
                  type: string
                title:
                  type: string
                fileName:
                  type: string
                notes:
                  type: string
                tagsList:
                  type: string
                privacyStatementId:
                  type: string
                referralCampaignId:
                  type: string
                referralTacticId:
                  type: string
                referralSource:
                  type: string
            encoding:
              fileName:
                contentType: text/plain
              file:
                contentType: application/octet-stream
              notes:
                contentType: text/plain
              privacyStatementId:
                contentType: text/plain
              referralSource:
                contentType: text/plain
              tagsList:
                contentType: text/plain
              referralCampaignId:
                contentType: text/plain
              strategy:
                contentType: text/plain
              title:
                contentType: text/plain
              referralTacticId:
                contentType: text/plain
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cdp/jobs/{job-id}:
    get:
      tags:
      - Customer Data Platform
      summary: Retrieve details for a job
      parameters:
      - name: job-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: Retrieve details for a job
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserTenant"
        "401":
          description: User is not authenticated or token has expired
          content:
            application/json: {}
        "403":
          description: 'User Cannot access the tenant '
          content:
            application/json: {}
        "404":
          description: Contact not found
          content:
            application/json: {}
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Customer Data Platform
      summary: Delete a JOB
      parameters:
      - name: job-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: Retrieve details for a job
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserTenant"
        "204":
          description: Success
          content:
            application/json: {}
        "403":
          description: 'User Cannot access the tenant '
          content:
            application/json: {}
        "404":
          description: Job not found
          content:
            application/json: {}
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cdp/jobs/{job-id}/run:
    post:
      tags:
      - Customer Data Platform
      summary: Run a job to import contact
      parameters:
      - name: job-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cdp/privacy-statements:
    get:
      tags:
      - Customer Data Platform
      summary: List privacy statements for the tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Customer Data Platform
      summary: List privacy statements for the tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CdpCreatePrivacyStatementRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cdp/privacy-statements/{privacy_id}:
    get:
      tags:
      - Customer Data Platform
      summary: Get privacy statements details
      parameters:
      - name: privacy_id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    put:
      tags:
      - Customer Data Platform
      summary: Update Privacy statements details
      parameters:
      - name: privacy_id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CdpPrivacyPolicy"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Customer Data Platform
      summary: Get privacy statements details
      parameters:
      - name: privacy_id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cdp/segments:
    get:
      tags:
      - Customer Data Platform
      summary: List segments for this tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Customer Data Platform
      summary: Create a segment for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CdpSegment"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cdp/segments/{segment-id}:
    get:
      tags:
      - Customer Data Platform
      summary: Retrieve details for a segment
      parameters:
      - name: segment-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    put:
      tags:
      - Customer Data Platform
      summary: Update an existing segment for a tenant
      parameters:
      - name: segment-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CdpSegment"
      responses:
        "202":
          description: design information has been updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserTenant"
        "401":
          description: User is not authenticated or token has expired
          content:
            application/json: {}
        "403":
          description: 'User Cannot access the tenant '
          content:
            application/json: {}
        "404":
          description: company not found
          content:
            application/json: {}
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Customer Data Platform
      summary: Delete an segment
      parameters:
      - name: segment-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/cdp/segments/{segment-id}/apply:
    get:
      tags:
      - Customer Data Platform
      summary: Test a segment on current contact list
      parameters:
      - name: segment-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/chats:
    get:
      tags:
      - ChatBot
      summary: "List chats for current tenant, filtering by agent"
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: agent-id
        in: query
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - ChatBot
      summary: Create a chat
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSessionRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/chats/{chat-id}:
    get:
      tags:
      - ChatBot
      summary: Find a unique chat by its Id (metadata)
      parameters:
      - name: chat-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - ChatBot
      summary: Delete a chat and all its messages
      parameters:
      - name: chat-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/chats/{chat-id}/messages:
    get:
      tags:
      - ChatBot
      summary: Display one one conversation
      parameters:
      - name: chat-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: full
        in: query
        schema:
          type: boolean
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - ChatBot
      summary: Create a new message in a conversation
      parameters:
      - name: chat-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatMessage"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/chats/{chat-id}/messages/{message-id}:
    delete:
      tags:
      - ChatBot
      summary: Delete a message
      parameters:
      - name: chat-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: message-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/chats/{chat-id}/rename:
    post:
      tags:
      - ChatBot
      summary: Create a new message in a conversation
      parameters:
      - name: chat-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RenameRequest1"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/chats/{chat-id}/sendMessage:
    post:
      tags:
      - ChatBot
      summary: Interact with Ai Assistant
      parameters:
      - name: chat-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/company:
    get:
      tags:
      - Configuration
      summary: List companies for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    put:
      tags:
      - Configuration
      summary: Update companies for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Company"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Configuration
      summary: Delete companies for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/content-edition/extract-document:
    post:
      tags:
      - Content Edition
      summary: Summarize a document
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  format: binary
                  type: string
                documentType:
                  type: string
                fileName:
                  type: string
                expiryDate:
                  type: string
                marketingStage:
                  type: string
                folder:
                  type: string
            encoding:
              expiryDate:
                contentType: text/plain
              fileName:
                contentType: text/plain
              file:
                contentType: application/octet-stream
              folder:
                contentType: text/plain
              documentType:
                contentType: text/plain
              marketingStage:
                contentType: text/plain
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/content-edition/extract-webpage:
    post:
      tags:
      - Content Edition
      summary: Summarize a webpage
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocumentScrappingRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/content-edition/render:
    post:
      tags:
      - Content Edition
      summary: Generate a PDF
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContentRenderingRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/content-edition/render-asset-pdf/{asset-id}:
    get:
      tags:
      - Content Edition
      summary: Generate a PDF
      parameters:
      - name: asset-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/content-edition/summarize-document:
    post:
      tags:
      - Content Edition
      summary: Summarize a document
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  format: binary
                  type: string
                documentType:
                  type: string
                fileName:
                  type: string
                expiryDate:
                  type: string
                marketingStage:
                  type: string
                folder:
                  type: string
            encoding:
              expiryDate:
                contentType: text/plain
              fileName:
                contentType: text/plain
              file:
                contentType: application/octet-stream
              folder:
                contentType: text/plain
              documentType:
                contentType: text/plain
              marketingStage:
                contentType: text/plain
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/content-edition/summarize-webpage:
    post:
      tags:
      - Content Edition
      summary: Summarize a webpage
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocumentScrappingRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/documents:
    get:
      tags:
      - Document Management
      summary: List documents attached to a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Document Management
      summary: Create a new document
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  format: binary
                  type: string
                documentType:
                  type: string
                fileName:
                  type: string
                expiryDate:
                  type: string
                marketingStage:
                  type: string
                folder:
                  type: string
            encoding:
              expiryDate:
                contentType: text/plain
              fileName:
                contentType: text/plain
              file:
                contentType: application/octet-stream
              folder:
                contentType: text/plain
              documentType:
                contentType: text/plain
              marketingStage:
                contentType: text/plain
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/documents/scrap:
    post:
      tags:
      - Document Management
      summary: Create a new document
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocumentScrappingRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/documents/{doc-id}:
    get:
      tags:
      - Document Management
      summary: Access Document Details
      parameters:
      - name: doc-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    put:
      tags:
      - Document Management
      summary: Create a new document
      parameters:
      - name: doc-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocumentUpdateRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Document Management
      summary: Update an existing document
      parameters:
      - name: doc-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/documents/{doc-id}/download:
    get:
      tags:
      - Document Management
      summary: Download a document
      parameters:
      - name: doc-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/drive/deleteFolder:
    post:
      tags:
      - Document Management
      summary: Delete a folder from its path and all its content
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FolderDeleteRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/drive/folders:
    get:
      tags:
      - Document Management
      summary: List all folders tree for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Document Management
      summary: Create a folder from its path
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FolderCreateRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/drive/folders/{folder-path}:
    get:
      tags:
      - Document Management
      summary: "Access content of a folder (files, subfolders, etc.)"
      parameters:
      - name: folder-path
        in: path
        required: true
        schema:
          pattern: .+
          type: string
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/drive/moveAsset/{asset-id}:
    post:
      tags:
      - Document Management
      summary: Move an asset to a different folder
      parameters:
      - name: asset-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MoveRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/drive/moveDocument/{document-id}:
    post:
      tags:
      - Document Management
      summary: Move a document to a different folder
      parameters:
      - name: document-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MoveRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/drive/moveFolder:
    post:
      tags:
      - Document Management
      summary: Move an folder to a different folder
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MoveFolderRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/drive/moveImage/{image-id}:
    post:
      tags:
      - Document Management
      summary: Move an image to a different folder
      parameters:
      - name: image-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MoveRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/drive/searchTitles:
    get:
      tags:
      - Document Management
      summary: Search drive items based on their name
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: searchTerm
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/drive/shareImage/{image-id}:
    post:
      tags:
      - Document Management
      summary: Move an image to a different folder
      parameters:
      - name: image-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShareRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/email/contents:
    get:
      tags:
      - Email Marketing
      summary: List content for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Email Marketing
      summary: Create a content for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailContent"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/email/contents/{content-id}:
    get:
      tags:
      - Email Marketing
      summary: Retrieve details for a content
      parameters:
      - name: content-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    put:
      tags:
      - Email Marketing
      summary: Update an existing content for a tenant
      parameters:
      - name: content-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailContent"
      responses:
        "202":
          description: design information has been updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserTenant"
        "401":
          description: User is not authenticated or token has expired
          content:
            application/json: {}
        "403":
          description: 'User Cannot access the tenant '
          content:
            application/json: {}
        "404":
          description: company not found
          content:
            application/json: {}
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Email Marketing
      summary: Delete a content (undeploy it is a template and non admin permissions)
      parameters:
      - name: content-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/email/designs:
    get:
      tags:
      - Email Marketing
      summary: List designs for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Email Marketing
      summary: Create a design for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailDesign"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/email/designs/{design-id}:
    get:
      tags:
      - Email Marketing
      summary: Retrieve details for a design
      parameters:
      - name: design-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    put:
      tags:
      - Email Marketing
      summary: Update an existing design for a tenant
      parameters:
      - name: design-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailDesign"
      responses:
        "202":
          description: design information has been updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserTenant"
        "401":
          description: User is not authenticated or token has expired
          content:
            application/json: {}
        "403":
          description: 'User Cannot access the tenant '
          content:
            application/json: {}
        "404":
          description: company not found
          content:
            application/json: {}
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Email Marketing
      summary: Delete a design (undeploy it is a template and non admin permissions)
      parameters:
      - name: design-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/email/emails:
    get:
      tags:
      - Email Marketing
      summary: List emails for this tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Email Marketing
      summary: Create a email for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailDefinition"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/email/emails/{email-id}:
    get:
      tags:
      - Email Marketing
      summary: Retrieve details for a emails
      parameters:
      - name: email-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    put:
      tags:
      - Email Marketing
      summary: Update an existing email for a tenant
      parameters:
      - name: email-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailDefinition"
      responses:
        "202":
          description: design information has been updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserTenant"
        "401":
          description: User is not authenticated or token has expired
          content:
            application/json: {}
        "403":
          description: 'User Cannot access the tenant '
          content:
            application/json: {}
        "404":
          description: company not found
          content:
            application/json: {}
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Email Marketing
      summary: Delete an email
      parameters:
      - name: email-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/email/emails/{email-id}/send:
    post:
      tags:
      - Email Marketing
      summary: Trigger the sending of emails
      parameters:
      - name: email-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: {}
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/email/settings:
    get:
      tags:
      - Email Marketing
      summary: Read Email Settings for a Tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    put:
      tags:
      - Email Marketing
      summary: Update Email Settings for a Tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailSettings"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/email/settings/providers:
    get:
      tags:
      - Email Marketing
      summary: List available Email Providers
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/features:
    get:
      tags:
      - Configuration
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/folders/{folder}:
    get:
      tags:
      - Document Management
      summary: List folders attached to a tenant
      parameters:
      - name: folder
        in: path
        required: true
        schema:
          type: string
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/images:
    get:
      tags:
      - Document Management
      summary: List images for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: page
        in: query
        schema:
          format: int32
          default: 0
          type: integer
      - name: searchTerm
        in: query
        schema:
          default: ""
          type: string
      - name: size
        in: query
        schema:
          format: int32
          default: 10
          type: integer
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Document Management
      summary: Create a new image
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  format: binary
                  type: string
                documentType:
                  type: string
                fileName:
                  type: string
                title:
                  type: string
                description:
                  type: string
                folder:
                  type: string
                marketingStage:
                  type: string
            encoding:
              fileName:
                contentType: text/plain
              file:
                contentType: application/octet-stream
              folder:
                contentType: text/plain
              documentType:
                contentType: text/plain
              description:
                contentType: text/plain
              title:
                contentType: text/plain
              marketingStage:
                contentType: text/plain
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/images/{image-id}:
    get:
      tags:
      - Document Management
      summary: Get one Image
      parameters:
      - name: image-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Document Management
      summary: Delete one Image
      parameters:
      - name: image-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/images/{image-id}/download:
    get:
      tags:
      - Document Management
      summary: Get one Image
      parameters:
      - name: image-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/integrations:
    get:
      tags:
      - Integrations
      summary: Show deployed connectors on a tenant with related configuration
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/integrations/pipedrive/about-me:
    get:
      tags:
      - Integrations
      summary: Get connected user profile information
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/integrations/pipedrive/config:
    get:
      tags:
      - Integrations
      summary: Get instagram configuration
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/integrations/pipedrive/disconnect:
    post:
      tags:
      - Integrations
      summary: Disconnect instagram
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/integrations/pipedrive/save-config:
    post:
      tags:
      - Integrations
      summary: Update instagram configuration
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PipeDriveConfiguration"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/integrations/pipedrive/validate:
    get:
      tags:
      - Integrations
      summary: Get pipedrive configuration
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/integrations/{integration-id}:
    get:
      tags:
      - Integrations
      summary: Show details of an integration on a tenant
      parameters:
      - name: integration-id
        in: path
        required: true
        schema:
          type: string
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    put:
      tags:
      - Integrations
      summary: Update configuration for a connector
      parameters:
      - name: integration-id
        in: path
        required: true
        schema:
          type: string
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObjectMap"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/integrations/{integration-id}/{operation-name}:
    get:
      tags:
      - Integrations
      summary: Show expected parameters for an operation on a connector
      parameters:
      - name: integration-id
        in: path
        required: true
        schema:
          type: string
      - name: operation-name
        in: path
        required: true
        schema:
          type: string
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Integrations
      summary: Execute an operation on a connector
      parameters:
      - name: integration-id
        in: path
        required: true
        schema:
          type: string
      - name: operation-name
        in: path
        required: true
        schema:
          type: string
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObjectMap"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/invite-user-request:
    post:
      tags:
      - Configuration
      summary: Invite a user to a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InviteAUserRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/invite-user-validation:
    get:
      tags:
      - Configuration
      summary: Validate Invite User
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: action
        in: query
        schema:
          $ref: "#/components/schemas/UUID"
      - name: code
        in: query
        schema:
          type: string
      - name: lang
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v1/{tenant-id}/invite-users:
    get:
      tags:
      - Configuration
      summary: Invite a user to a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: Returned the list of pending invites
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserPendingActionEntity"
        "401":
          description: User is not authenticated or token expired
          content:
            application/json: {}
        "403":
          description: User Cannot access the tenant or has not enough permissions
            (tenant admin)
          content:
            application/json: {}
        "404":
          description: Tenant not found
          content:
            application/json: {}
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/invite-users/{invite-id}:
    delete:
      tags:
      - Configuration
      summary: Cancel a pending invite
      parameters:
      - name: invite-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "204":
          description: The pending invite has been canceled
          content:
            application/json: {}
        "401":
          description: User is not authenticated or token expired
          content:
            application/json: {}
        "403":
          description: User Cannot access the tenant or has not enough permissions
            (tenant admin)
          content:
            application/json: {}
        "404":
          description: Tenant or invitation not found
          content:
            application/json: {}
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoodBardsError"
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/links:
    get:
      tags:
      - Url Shortened Resource
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
    post:
      tags:
      - Url Shortened Resource
      summary: Create a code for a long URL
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShortenedUrlRequest"
      responses:
        "200":
          description: OK
  /v1/{tenant-id}/links/{code}:
    get:
      tags:
      - Url Shortened Resource
      parameters:
      - name: code
        in: path
        required: true
        schema:
          type: string
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
    put:
      tags:
      - Url Shortened Resource
      summary: Update an existing Code
      parameters:
      - name: code
        in: path
        required: true
        schema:
          type: string
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShortenedUrl"
      responses:
        "200":
          description: OK
    delete:
      tags:
      - Url Shortened Resource
      summary: Delete a code
      parameters:
      - name: code
        in: path
        required: true
        schema:
          type: string
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
  /v1/{tenant-id}/notifications:
    get:
      tags:
      - Configuration
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Configuration
      summary: Create a notification for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WSEventNotification"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/notifications/{notification-id}:
    delete:
      tags:
      - Configuration
      parameters:
      - name: notification-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/notifications/{notification-id}/read:
    put:
      tags:
      - Configuration
      summary: Mark a notification as read for a tenant
      parameters:
      - name: notification-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/notifications/{notification-id}/unread:
    put:
      tags:
      - Configuration
      summary: Mark a notification as unread for a tenant
      parameters:
      - name: notification-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/press-release:
    get:
      tags:
      - Configuration
      summary: Show press release information for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    put:
      tags:
      - Configuration
      summary: Update press release information for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PressRelease"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Configuration
      summary: Delete press release information for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/processes:
    get:
      tags:
      - Process Engine
      summary: List Processes for a user
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/processes/{process-id}:
    get:
      tags:
      - Process Engine
      summary: Get details for a process
      parameters:
      - name: process-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/processes/{process-id}/audit:
    get:
      tags:
      - Process Engine
      summary: Retrieve audit information for a process
      parameters:
      - name: process-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/processes/{process-id}/steps:
    get:
      tags:
      - Process Engine
      summary: Retrieve Steps for a process
      parameters:
      - name: process-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/processes/{process-id}/variables:
    get:
      tags:
      - Process Engine
      summary: Retrieve Variables for a process
      parameters:
      - name: process-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/products:
    get:
      tags:
      - Configuration
      summary: List All product for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Configuration
      summary: Add products for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/products/{product-id}:
    get:
      tags:
      - Configuration
      summary: Show product for a tenant
      parameters:
      - name: product-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    put:
      tags:
      - Configuration
      summary: Update products for a tenant
      parameters:
      - name: product-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Configuration
      summary: Delete products for a tenant
      parameters:
      - name: product-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/queues:
    get:
      tags:
      - Process Engine
      summary: List Queues for a user
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/queues/{queue-id}:
    get:
      tags:
      - Process Engine
      summary: Get details for a queue
      parameters:
      - name: queue-id
        in: path
        required: true
        schema:
          type: string
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/queues/{queue-id}/tasks:
    get:
      tags:
      - Process Engine
      summary: List tasks in a queue
      parameters:
      - name: queue-id
        in: path
        required: true
        schema:
          type: string
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/recommended-tactics:
    get:
      tags:
      - Case Management
      summary: Get a list of recommended tactics
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/rename:
    post:
      tags:
      - Configuration
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RenameRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/settings:
    get:
      tags:
      - Configuration
      summary: Update core settings for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Configuration
      summary: Update core settings for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TenantSettingsUpdateRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/facebook/analytics/{page-id}/reports:
    get:
      tags:
      - Social Media
      summary: List Available Reports Summary
      parameters:
      - name: page-id
        in: path
        required: true
        schema:
          type: string
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Social Media
      summary: Trigger a job to launch import jobs
      parameters:
      - name: page-id
        in: path
        required: true
        schema:
          type: string
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/facebook/analytics/{page-id}/reports/{report-id}:
    get:
      tags:
      - Social Media
      summary: "Display Analytics Report, report-time could be 'latest' or "
      parameters:
      - name: page-id
        in: path
        required: true
        schema:
          type: string
      - name: report-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Social Media
      summary: Delete a report from its id
      parameters:
      - name: page-id
        in: path
        required: true
        schema:
          type: string
      - name: report-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/facebook/analytics/{page-id}/reports/{report-id}/metrics:
    get:
      tags:
      - Social Media
      summary: Show all metrics for a report
      parameters:
      - name: page-id
        in: path
        required: true
        schema:
          type: string
      - name: report-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/facebook/analytics/{page-id}/reports/{report-id}/postsMetrics:
    get:
      tags:
      - Social Media
      summary: Show all posts for a report
      parameters:
      - name: page-id
        in: path
        required: true
        schema:
          type: string
      - name: report-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/facebook/config:
    get:
      tags:
      - Social Media
      summary: Get facebook configuration
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/facebook/destinations:
    get:
      tags:
      - Social Media
      summary: Get available facebook pages
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: all
        in: query
        schema:
          type: boolean
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/facebook/disconnect:
    post:
      tags:
      - Social Media
      summary: Disconnect facebook
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/facebook/save-config:
    post:
      tags:
      - Social Media
      summary: Update facebook configuration
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FacebookConfiguration"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/facebook/tactics/{tactic-id}/assets/{asset-id}:
    post:
      tags:
      - Social Media
      summary: Post an asset to Facebook
      parameters:
      - name: asset-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tactic-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: pageId
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Social Media
      summary: Delete a post from Facebook
      parameters:
      - name: asset-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tactic-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/instagram/about-me:
    get:
      tags:
      - Social Media
      summary: Get connected user profile information
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/instagram/analytics/reports:
    get:
      tags:
      - Social Media
      summary: List Available Reports Summary
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Social Media
      summary: Trigger a job to launch import jobs
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/instagram/analytics/reports/{report-id}:
    get:
      tags:
      - Social Media
      summary: "Display Analytics Report, report-time could be 'latest' or "
      parameters:
      - name: report-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Social Media
      summary: Delete a report from its id
      parameters:
      - name: report-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/instagram/analytics/reports/{report-id}/metrics:
    get:
      tags:
      - Social Media
      summary: Show all metrics for a report
      parameters:
      - name: report-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/instagram/analytics/reports/{report-id}/postsMetrics:
    get:
      tags:
      - Social Media
      summary: Show all posts for a report
      parameters:
      - name: report-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/instagram/config:
    get:
      tags:
      - Social Media
      summary: Get instagram configuration
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/instagram/disconnect:
    post:
      tags:
      - Social Media
      summary: Disconnect instagram
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/instagram/save-config:
    post:
      tags:
      - Social Media
      summary: Update instagram configuration
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InstagramConfiguration"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/instagram/tactics/{tactic-id}/assets/{asset-id}:
    post:
      tags:
      - Social Media
      summary: Post latest version of an asset to Instagram
      parameters:
      - name: asset-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tactic-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/instagram/tactics/{tactic-id}/assets/{asset-id}/{asset-version}:
    post:
      tags:
      - Social Media
      summary: Post a pre-defined version of an asset to Instagram
      parameters:
      - name: asset-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: asset-version
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: tactic-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/instagram/usage-limit:
    get:
      tags:
      - Social Media
      summary: Get Daily Usage Limit
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/linkedin/analytics/{organization_id}/reports:
    get:
      tags:
      - Social Media
      summary: List Available Reports Summary
      parameters:
      - name: organization_id
        in: path
        required: true
        schema:
          type: string
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Social Media
      summary: Trigger a job to launch import jobs
      parameters:
      - name: organization_id
        in: path
        required: true
        schema:
          type: string
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/linkedin/analytics/{organization_id}/reports/{report-id}:
    get:
      tags:
      - Social Media
      summary: "Display Analytics Report, report-time could be 'latest' or "
      parameters:
      - name: organization_id
        in: path
        required: true
        schema:
          type: string
      - name: report-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/linkedin/analytics/{organization_id}/reports/{report-id}/metrics:
    get:
      tags:
      - Social Media
      summary: Show all metrics for a report
      parameters:
      - name: organization_id
        in: path
        required: true
        schema:
          type: string
      - name: report-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/linkedin/analytics/{organization_id}/reports/{report-id}/postsMetrics:
    get:
      tags:
      - Social Media
      summary: Show all posts for a report
      parameters:
      - name: organization_id
        in: path
        required: true
        schema:
          type: string
      - name: report-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/linkedin/analytics/{page-id}/reports/{report-id}:
    delete:
      tags:
      - Social Media
      summary: Delete a report from its id
      parameters:
      - name: page-id
        in: path
        required: true
        schema:
          type: string
      - name: report-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/linkedin/config:
    get:
      tags:
      - Social Media
      summary: Get twitter configuration
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/linkedin/destinations:
    get:
      tags:
      - Social Media
      summary: Get available linkedin destinations
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: all
        in: query
        schema:
          type: boolean
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/linkedin/disconnect:
    post:
      tags:
      - Social Media
      summary: Disconnect twitter
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/linkedin/save-config:
    post:
      tags:
      - Social Media
      summary: Update LinkedIn configuration
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LinkedInConfiguration"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/summary:
    get:
      tags:
      - Social Media
      summary: Get the social media summary based for the tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/telegram/authorization-state:
    get:
      tags:
      - Social Media
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
  /v1/{tenant-id}/social-media/telegram/config:
    get:
      tags:
      - Social Media
      summary: Get telegram configuration
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/telegram/disconnect:
    post:
      tags:
      - Social Media
      summary: Disconnect from Telegram and update user configuration
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: phoneNumber
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/telegram/list-pages:
    get:
      tags:
      - Social Media
      summary: Get available telegram pages
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: phoneNumber
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/telegram/save-config:
    post:
      tags:
      - Social Media
      summary: Update Telegran configuration
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TelegramConfiguration"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/telegram/send-code:
    post:
      tags:
      - Social Media
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: phoneNumber
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v1/{tenant-id}/social-media/telegram/tactics/{tactic-id}/assets/{asset-id}:
    post:
      tags:
      - Social Media
      summary: Post latest version of an asset to Telegram
      parameters:
      - name: asset-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tactic-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: chatId
        in: query
        schema:
          type: string
      - name: chatName
        in: query
        schema:
          type: string
      - name: phoneNumber
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Social Media
      summary: Delete a post from telegran
      parameters:
      - name: asset-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tactic-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: phoneNumber
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/telegram/tactics/{tactic-id}/assets/{asset-id}/{asset-version}:
    post:
      tags:
      - Social Media
      summary: Post latest version of an asset to Telegram
      parameters:
      - name: asset-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: asset-version
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: tactic-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: chatId
        in: query
        schema:
          type: string
      - name: chatName
        in: query
        schema:
          type: string
      - name: phoneNumber
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/telegram/validate-code:
    post:
      tags:
      - Social Media
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: code
        in: query
        schema:
          type: string
      - name: phoneNumber
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v1/{tenant-id}/social-media/telegram/validate-password:
    post:
      tags:
      - Social Media
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: password
        in: query
        schema:
          type: string
      - name: phoneNumber
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v1/{tenant-id}/social-media/telegram/view/tactics/{tactic-id}/}{asset-id}:
    get:
      tags:
      - Social Media
      summary: Get available telegram pages
      parameters:
      - name: asset-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tactic-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: phoneNumber
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/tiktok/config:
    get:
      tags:
      - Social Media
      summary: Update tiktok configuration
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/tiktok/disconnect:
    post:
      tags:
      - Social Media
      summary: Update tiktok configuration
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/tiktok/get-creator-info:
    post:
      tags:
      - Social Media
      summary: Get Tiktok Creator Info
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/tiktok/get-publish-status:
    post:
      tags:
      - Social Media
      summary: Get the publish Status from Tiktok
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PublishId"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/tiktok/init-video-export:
    post:
      tags:
      - Social Media
      summary: Initiate the video export to Tiktok and get the upload url
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InitVideoExport"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/tiktok/save-config:
    post:
      tags:
      - Social Media
      summary: Update tiktok configuration
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SaveTiktokConfig"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/twitter/analytics/reports:
    get:
      tags:
      - Social Media
      summary: List Available Reports Summary
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    post:
      tags:
      - Social Media
      summary: Trigger a job to launch import jobs
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/twitter/analytics/reports/{report-id}:
    get:
      tags:
      - Social Media
      summary: "Display Analytics Report, report-time could be 'latest' or "
      parameters:
      - name: report-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Social Media
      summary: Delete a report from its id
      parameters:
      - name: report-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/twitter/analytics/reports/{report-id}/metrics:
    get:
      tags:
      - Social Media
      summary: Show all metrics for a report
      parameters:
      - name: report-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/twitter/analytics/reports/{report-id}/postsMetrics:
    get:
      tags:
      - Social Media
      summary: Show all posts for a report
      parameters:
      - name: report-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/twitter/config:
    get:
      tags:
      - Social Media
      summary: Get twitter configuration
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/twitter/disconnect:
    post:
      tags:
      - Social Media
      summary: Disconnect twitter
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/twitter/save-config:
    post:
      tags:
      - Social Media
      summary: Update tiktok configuration
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TwitterConfiguration"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/twitter/tactics/{tactic-id}/assets/{asset-id}:
    post:
      tags:
      - Social Media
      summary: Post an asset to Twitter
      parameters:
      - name: asset-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tactic-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Social Media
      summary: Delete post from Twitter
      parameters:
      - name: asset-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tactic-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/twitter/validate:
    post:
      tags:
      - Social Media
      summary: Validate some content for twitter
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContentValidationRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/wordpress-dot-com/config:
    get:
      tags:
      - Social Media
      summary: Get wordpress configuration
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    put:
      tags:
      - Social Media
      summary: Update wordpress configuration
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WordpressDotComConfiguration"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/wordpress-dot-com/disconnect:
    post:
      tags:
      - Social Media
      summary: Disconnect wordpress
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/wordpress-dot-com/tactics/{tactic-id}/assets/{asset-id}:
    post:
      tags:
      - Social Media
      summary: Post an asset to WordPress
      parameters:
      - name: asset-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tactic-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Social Media
      summary: Delete a post from wordpress
      parameters:
      - name: asset-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tactic-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/wordpress/config:
    get:
      tags:
      - Social Media
      summary: Get wordpress configuration
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    put:
      tags:
      - Social Media
      summary: Update wordpress configuration
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WordpressConfiguration"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/wordpress/disconnect:
    post:
      tags:
      - Social Media
      summary: Disconnect wordpress
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/wordpress/import-all-posts:
    post:
      tags:
      - Social Media
      summary: Post an asset to WordPress
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/wordpress/tactics/{tactic-id}/assets/{asset-id}:
    post:
      tags:
      - Social Media
      summary: Post an asset to WordPress
      parameters:
      - name: asset-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tactic-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: status
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Social Media
      summary: Delete a post from wordpress
      parameters:
      - name: asset-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tactic-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/social-media/wordpress/validate:
    get:
      tags:
      - Social Media
      summary: Get piepdrive configuration
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/tasks/{task-id}:
    get:
      tags:
      - Process Engine
      summary: Get task details.
      parameters:
      - name: task-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    put:
      tags:
      - Process Engine
      summary: Update task variable and status
      parameters:
      - name: task-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/TaskVariable"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/tasks/{task-id}/complete:
    post:
      tags:
      - Process Engine
      summary: Complete a Task
      parameters:
      - name: task-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/TaskVariable"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/tasks/{task-id}/linkDocument:
    post:
      tags:
      - Process Engine
      summary: Attach a document to a task
      parameters:
      - name: task-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LinkRequest"
      responses:
        "403":
          description: Tenant or permissions forbidden
          content:
            application/json: {}
        "404":
          description: "Variable, Document or task not found"
          content:
            application/json: {}
        "500":
          description: Internal Server Error
          content:
            application/json: {}
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/tasks/{task-id}/lock:
    post:
      tags:
      - Process Engine
      summary: Lock task and get current details
      parameters:
      - name: task-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/tasks/{task-id}/unlock:
    post:
      tags:
      - Process Engine
      summary: Unlock task without modifications (need to be lock)
      parameters:
      - name: task-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/tools/qrcode:
    post:
      tags:
      - Tools
      summary: Generate a QR CODE
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QRCodeRequest"
      responses:
        "200":
          description: OK
  /v1/{tenant-id}/users:
    get:
      tags:
      - Configuration
      summary: List of users for a particular tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/users/{user-id}:
    put:
      tags:
      - Configuration
      summary: Update Roles a user in the tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: user-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRolesAndPermissionsUserRequest"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Configuration
      summary: Revoke a user from a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: user-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /v1/{tenant-id}/videos:
    get:
      tags:
      - Document Management
      summary: List images for a tenant
      parameters:
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: page
        in: query
        schema:
          format: int32
          default: 0
          type: integer
      - name: searchTerm
        in: query
        schema:
          default: ""
          type: string
      - name: size
        in: query
        schema:
          format: int32
          default: 10
          type: integer
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
  /www/i/{tenant-id}/{image-id}:
    get:
      tags:
      - Expose Images
      summary: List images for a tenant
      parameters:
      - name: image-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: tenant-id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: format
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
components:
  schemas:
    AiAgentDefinitionWithPrompt:
      type: object
      properties:
        llm:
          type: string
        modelName:
          type: string
        temperature:
          format: double
          type: number
        topK:
          format: int32
          type: integer
        topP:
          format: double
          type: number
        maxTokens:
          format: int32
          type: integer
        maxRetries:
          format: int32
          type: integer
        timeout:
          format: int32
          type: integer
        jsonMode:
          type: boolean
        endpointUrl:
          type: string
        endpointModelName:
          type: string
        id:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
        description:
          type: string
        agentType:
          type: string
        agentUsage:
          type: string
        promptId:
          type: string
        avatar:
          type: string
        chatId:
          $ref: "#/components/schemas/UUID"
        rag:
          type: boolean
        maxRagResults:
          format: int32
          type: integer
        minScoreRag:
          format: double
          type: number
        webSearch:
          type: boolean
        maxWebSearchResults:
          format: int32
          type: integer
        reranking:
          type: boolean
        reranker:
          type: string
        rerankMaxResults:
          format: int32
          type: integer
        visible:
          type: boolean
        template:
          type: boolean
        welcomeMessage:
          type: string
        tools:
          type: array
          items:
            type: string
        params:
          type: array
          items:
            $ref: "#/components/schemas/AiAgentParameter"
        promptName:
          type: string
        systemPrompt:
          type: string
        promptLlm:
          type: string
        promptModel:
          type: string
    AiAgentParameter:
      type: object
      properties:
        description:
          type: string
        defaultValue:
          type: string
        required:
          type: boolean
        location:
          type: string
        permission:
          type: string
    AiAgentWelcomeMessageRequest:
      type: object
      properties:
        agentName:
          type: string
        description:
          type: string
        agentCategory:
          type: string
        systemPrompt:
          type: string
    AiModel:
      type: object
      properties:
        provider:
          type: string
        name:
          type: string
        creator:
          type: string
        type:
          $ref: "#/components/schemas/AiModelType"
        dimension:
          format: int32
          type: integer
        negativePrompt:
          type: boolean
        aspectRatio:
          type: array
          items:
            type: string
        languages:
          type: array
          items:
            type: string
        styles:
          type: array
          items:
            type: string
        qualities:
          type: array
          items:
            type: string
        jsonOutput:
          type: boolean
        reasoning:
          type: boolean
        multimodal:
          type: boolean
        streaming:
          type: boolean
        tools:
          type: boolean
        inputModalities:
          type: array
          items:
            type: string
        outputModalities:
          type: array
          items:
            type: string
        endpointUrl:
          type: string
        endpointName:
          type: string
    AiModelType:
      enum:
      - CHAT_COMPLETION
      - TEXT_EMBEDDINGS
      - TEXT_GENERATION
      - IMAGE_GENERATION
      - SPEECH_TO_TEXT
      - TEXT_TO_SPEECH
      - IMAGE_RECOGNITION
      - IMAGE_EMBEDDINGS
      - VISION
      type: string
    AiSessionVariable:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    AiSessionWSTypes:
      enum:
      - action_change_agent
      - action_refresh_context
      - action_redirect
      - request_status
      - token_response
      - request_response
      - error
      - chat_message
      type: string
    AnswerSecurityQuestionRequest:
      type: object
      properties:
        answer:
          type: string
    Asset:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        tenantId:
          $ref: "#/components/schemas/UUID"
        title:
          type: string
        createdBy:
          $ref: "#/components/schemas/UUID"
        createdDate:
          $ref: "#/components/schemas/Date"
        modifiedDate:
          $ref: "#/components/schemas/Date"
        expirationDate:
          $ref: "#/components/schemas/Date"
        lastModifiedBy:
          $ref: "#/components/schemas/UUID"
        attachmentList:
          type: array
          items:
            format: uuid
            pattern: "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
            type: string
        imageList:
          type: array
          items:
            format: uuid
            pattern: "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
            type: string
        associatedRequests:
          type: array
          items:
            $ref: "#/components/schemas/GeneratedContent"
        marketingStage:
          type: string
        assetType:
          type: string
        folder:
          type: string
        versionNumber:
          format: int32
          type: integer
        content:
          type: string
        contentSize:
          format: int64
          type: integer
        versions:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AssetContent"
        sharedFromParent:
          type: boolean
        syncWithChildren:
          type: boolean
        tenantSharedList:
          type: array
          items:
            $ref: "#/components/schemas/TenantShared"
    AssetContent:
      type: object
      properties:
        size:
          format: int64
          type: integer
        versionNumber:
          format: int32
          type: integer
        content:
          type: string
        createdBy:
          $ref: "#/components/schemas/UUID"
        createdDate:
          $ref: "#/components/schemas/Date"
        modifiedDate:
          $ref: "#/components/schemas/Date"
        lastModifiedBy:
          $ref: "#/components/schemas/UUID"
    CalendarBlackoutPeriod:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        tenantUid:
          $ref: "#/components/schemas/UUID"
        startDate:
          $ref: "#/components/schemas/Date"
        endDate:
          $ref: "#/components/schemas/Date"
        description:
          type: string
        name:
          type: string
        allDay:
          type: boolean
        textColor:
          type: string
        backgroundColor:
          type: string
    CalendarEvent:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        tenantUid:
          $ref: "#/components/schemas/UUID"
        startDate:
          $ref: "#/components/schemas/Date"
        endDate:
          $ref: "#/components/schemas/Date"
        description:
          type: string
        name:
          type: string
        allDay:
          type: boolean
        textColor:
          type: string
        backgroundColor:
          type: string
    Case:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        tenantId:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
        businessKey:
          type: string
        caseDefinitionUid:
          $ref: "#/components/schemas/UUID"
        caseDefinitionLabel:
          type: string
        createdBy:
          type: string
        createdDate:
          $ref: "#/components/schemas/Date"
        lastModifier:
          type: string
        lastModificationDate:
          $ref: "#/components/schemas/Date"
        status:
          type: string
        completedDate:
          $ref: "#/components/schemas/Date"
        suspendedDate:
          $ref: "#/components/schemas/Date"
        variables:
          type: array
          items:
            $ref: "#/components/schemas/CaseVariable"
        processes:
          type: array
          items:
            $ref: "#/components/schemas/ProcessSummary"
        description:
          type: string
        startDate:
          $ref: "#/components/schemas/Date"
        endDate:
          $ref: "#/components/schemas/Date"
    CaseCreationRequest:
      type: object
      properties:
        caseDefinitionUid:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
        businessKey:
          type: string
        startDate:
          $ref: "#/components/schemas/Date"
        endDate:
          $ref: "#/components/schemas/Date"
        params:
          uniqueItems: true
          type: array
          items:
            $ref: "#/components/schemas/CaseVariableCreationRequest"
    CaseDefinition:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        label:
          type: string
        params:
          type: array
          items:
            $ref: "#/components/schemas/ParameterDefinition2"
        tenants:
          type: array
          items:
            $ref: "#/components/schemas/TenantDefinition"
    CaseVariable:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
        type:
          type: string
        value: {}
        parameterDefinitionId:
          $ref: "#/components/schemas/UUID"
    CaseVariableCreationRequest:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        value: {}
    CdpCompany:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        tenantUid:
          $ref: "#/components/schemas/UUID"
        companyCode:
          type: string
        companyName:
          type: string
        industry:
          type: string
        contactPerson:
          type: string
        contactEmail:
          type: string
        contactPhone:
          type: string
        street:
          type: string
        city:
          type: string
        state:
          type: string
        country:
          type: string
        zipCode:
          type: string
        createdAt:
          $ref: "#/components/schemas/Instant"
        updatedAt:
          $ref: "#/components/schemas/Instant"
        description:
          type: string
        foundedYear:
          format: int32
          type: integer
        annualRevenue:
          format: double
          type: number
        numberOfEmployees:
          format: int32
          type: integer
        websiteUrl:
          type: string
        logoUrl:
          type: string
        companySize:
          type: string
        status:
          type: string
        timezone:
          type: string
        linkedinUrl:
          type: string
        twitterHandle:
          type: string
        facebookUrl:
          type: string
        registrationNumber:
          type: string
        legalEntityType:
          type: string
    CdpContact:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        code:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        birthDate:
          type: string
        phone:
          type: string
        timezone:
          type: string
        secondaryEmail:
          type: string
        secondaryPhone:
          type: string
        jobTitle:
          type: string
        companyId:
          $ref: "#/components/schemas/UUID"
        companyName:
          type: string
        status:
          type: string
        segments:
          type: array
          items:
            type: string
        street:
          type: string
        city:
          type: string
        state:
          type: string
        country:
          type: string
        zipCode:
          type: string
        linkedin:
          type: string
        facebook:
          type: string
        twitter:
          type: string
        instagram:
          type: string
        referralCampaign:
          $ref: "#/components/schemas/UUID"
        referralCampaignName:
          type: string
        referralTactic:
          $ref: "#/components/schemas/UUID"
        referralTacticName:
          type: string
        referralSource:
          type: string
        tags:
          type: array
          items:
            type: string
        preferredContactMethod:
          type: string
        notes:
          type: string
        customerTypeInternal:
          type: string
        customerType:
          type: string
        createdAt:
          $ref: "#/components/schemas/Instant"
        updatedAt:
          $ref: "#/components/schemas/Instant"
        policies:
          type: array
          items:
            $ref: "#/components/schemas/CdpContactPrivacyPolicy"
    CdpContactPrivacyPolicy:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        title:
          type: string
        settings:
          type: string
        acceptedAt:
          type: string
    CdpContactsBulkDeleteRequest:
      type: object
      properties:
        ids:
          type: array
          items:
            format: uuid
            pattern: "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
            type: string
    CdpCreatePrivacyStatementRequest:
      type: object
      properties:
        active:
          type: boolean
        title:
          type: string
        content:
          type: string
        startDate:
          type: string
        endDate:
          type: string
        lang:
          type: string
        settings:
          type: string
    CdpPrivacyPolicy:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        tenantUid:
          $ref: "#/components/schemas/UUID"
        createdAt:
          $ref: "#/components/schemas/Instant"
        updatedAt:
          $ref: "#/components/schemas/Instant"
        createdBy:
          $ref: "#/components/schemas/UUID"
        title:
          type: string
        content:
          type: string
        settings:
          type: string
        lang:
          type: string
        startDate:
          type: string
        endDate:
          type: string
        active:
          type: boolean
    CdpSegment:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        tenantUid:
          $ref: "#/components/schemas/UUID"
        createdAt:
          $ref: "#/components/schemas/Date"
        updatedAt:
          $ref: "#/components/schemas/Date"
        name:
          type: string
        description:
          type: string
        contactFilterExpression:
          type: string
        behaviorFilterExpression:
          type: string
        alertFilterExpression:
          type: string
    ChangeAgentRequest:
      type: object
      properties:
        newAgentId:
          type: string
    ChangeAiSessionVariablesRequest:
      type: object
      properties:
        notification:
          type: boolean
        variables:
          type: array
          items:
            $ref: "#/components/schemas/AiSessionVariable"
    ChangeEmailRequest:
      type: object
      properties:
        email:
          type: string
    ChangeEmailValidationRequest:
      type: object
      properties:
        validationCode:
          type: string
    ChangePasswordRequest:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
        questioned:
          type: boolean
        question:
          type: string
        questionAnswer:
          type: string
    ChatMessage:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        sessionId:
          $ref: "#/components/schemas/UUID"
        agentId:
          $ref: "#/components/schemas/UUID"
        timestamp:
          $ref: "#/components/schemas/Instant"
        author:
          type: string
        content:
          type: string
        llmProvider:
          type: string
        modelName:
          type: string
        toolId:
          type: string
        toolName:
          type: string
        type:
          $ref: "#/components/schemas/MessageType"
        toolExecutionRequestList:
          type: array
          items:
            $ref: "#/components/schemas/ChatToolExecutionRequest"
        choices:
          type: array
          items:
            $ref: "#/components/schemas/ChatMessageChoice"
    ChatMessageChoice:
      type: object
      properties:
        position:
          format: int32
          type: integer
        text:
          type: string
        selected:
          type: boolean
    ChatRequest:
      type: object
      properties:
        userMessage:
          type: string
        llmSettings:
          $ref: "#/components/schemas/LLmSettings"
    ChatToolExecutionRequest:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        arguments:
          type: string
    Company:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
        description:
          type: string
        website:
          type: string
        address:
          type: string
        keywords:
          type: array
          items:
            type: string
        hashtags:
          type: array
          items:
            type: string
        contactEmail:
          type: string
    Constraints:
      type: object
      properties:
        required:
          type: boolean
        min:
          format: double
          type: number
        max:
          format: double
          type: number
        minLength:
          format: int32
          type: integer
        maxLength:
          format: int32
          type: integer
        pattern:
          type: string
    ContactUsForm:
      type: object
      properties:
        name:
          type: string
        companyName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        budget:
          type: string
        employees:
          type: string
        message:
          type: string
    ContentGenerationRequest:
      type: object
      properties:
        llmRequest:
          $ref: "#/components/schemas/LLmSettings"
        userRequest:
          type: string
        promptDefinitionId:
          $ref: "#/components/schemas/UUID"
        productId:
          type: string
        variables:
          type: array
          items:
            $ref: "#/components/schemas/PromptVariable"
        rag:
          type: boolean
    ContentImprovementRequest:
      type: object
      properties:
        llmRequest:
          $ref: "#/components/schemas/LLmSettings"
        userRequest:
          type: string
        promptDefinitionId:
          $ref: "#/components/schemas/UUID"
        productId:
          type: string
        variables:
          type: array
          items:
            $ref: "#/components/schemas/PromptVariable"
        rag:
          type: boolean
        previousOutput:
          type: string
        improvementRequest:
          type: string
    ContentRenderingRequest:
      type: object
      properties:
        outputFormat:
          type: string
        fileName:
          type: string
        template:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
    ContentValidationRequest:
      type: object
      properties:
        content:
          type: string
    CopyPromptRequest:
      type: object
      properties:
        promptId:
          $ref: "#/components/schemas/UUID"
        newName:
          type: string
    CreateApiKeyRequest:
      type: object
      properties:
        description:
          type: string
        expirationDate:
          type: string
    CreateImageRequest:
      type: object
      properties:
        llm:
          type: string
        modelName:
          type: string
        prompt:
          type: string
        size:
          type: string
        quality:
          type: string
        style:
          type: string
        negativePrompt:
          type: string
        height:
          format: int32
          type: integer
        width:
          format: int32
          type: integer
        file:
          format: binary
          type: string
        documentType:
          type: string
        title:
          type: string
        description:
          type: string
        fileName:
          type: string
          deprecated: true
        folder:
          type: string
        marketingStage:
          type: string
        parentTenantId:
          $ref: "#/components/schemas/UUID"
    CreateSessionRequest:
      type: object
      properties:
        agentId:
          type: string
        title:
          type: string
    Credentials:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    Credentials2fa:
      type: object
      properties:
        userCode:
          format: int32
          type: integer
        validationCode:
          type: string
    Date:
      format: date
      type: string
      example: 2022-03-10
    DocumentScrappingRequest:
      type: object
      properties:
        url:
          type: string
        title:
          type: string
        folder:
          type: string
        fileName:
          type: string
        expiryDate:
          type: string
        marketingStage:
          type: string
    DocumentUpdateRequest:
      type: object
      properties:
        name:
          type: string
        expirationDate:
          $ref: "#/components/schemas/Date"
        marketingStage:
          type: string
        folder:
          type: string
    EmailContent:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        createdBy:
          $ref: "#/components/schemas/UUID"
        createdAt:
          $ref: "#/components/schemas/Date"
        lastModified:
          $ref: "#/components/schemas/Date"
        name:
          type: string
        sourceType:
          type: string
        sourceId:
          type: string
        subject:
          type: string
        htmlBody:
          type: string
        textBody:
          type: string
        visible:
          type: boolean
        template:
          type: boolean
    EmailDefinition:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
        tenantUid:
          $ref: "#/components/schemas/UUID"
        createdBy:
          $ref: "#/components/schemas/UUID"
        createdAt:
          $ref: "#/components/schemas/Date"
        lastModified:
          $ref: "#/components/schemas/Date"
        designUid:
          $ref: "#/components/schemas/UUID"
        subject:
          type: string
        htmlBody:
          type: string
        textBody:
          type: string
        sourceType:
          type: string
        sourceId:
          type: string
        senderAddress:
          type: string
        senderName:
          type: string
        replyTo:
          type: string
        recipients:
          type: array
          items:
            type: string
        cc:
          type: array
          items:
            type: string
        bcc:
          type: array
          items:
            type: string
        recipientSegments:
          type: array
          items:
            $ref: "#/components/schemas/UUID"
        status:
          type: string
        publishedDate:
          $ref: "#/components/schemas/Date"
        startDate:
          $ref: "#/components/schemas/Date"
        endDate:
          $ref: "#/components/schemas/Date"
        elapsedTime:
          format: int64
          type: integer
        emailSent:
          format: int32
          type: integer
        emailBounced:
          format: int32
          type: integer
        emailOpened:
          format: int32
          type: integer
        emailClicked:
          format: int32
          type: integer
    EmailDesign:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        createdBy:
          $ref: "#/components/schemas/UUID"
        createdAt:
          $ref: "#/components/schemas/Date"
        lastModified:
          $ref: "#/components/schemas/Date"
        name:
          type: string
        description:
          type: string
        htmlContent:
          type: string
        visible:
          type: boolean
        template:
          type: boolean
    EmailSettings:
      type: object
      properties:
        tenantUid:
          $ref: "#/components/schemas/UUID"
        emailProvider:
          type: string
        defaultSenderAddress:
          type: string
        defaultSenderName:
          type: string
        defaultReplyToAddress:
          type: string
        domain:
          type: string
    Event:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        tenantUid:
          $ref: "#/components/schemas/UUID"
        eventType:
          type: string
        eventDate:
          $ref: "#/components/schemas/Instant"
        eventDetails:
          type: string
        owner:
          type: string
    FacebookConfiguration:
      type: object
      properties:
        active:
          type: boolean
        accessToken:
          type: string
        username:
          type: string
        profileUrl:
          type: string
        expireIn:
          type: string
        idToken:
          type: string
        profileEmail:
          type: string
        destinations:
          type: array
          items:
            $ref: "#/components/schemas/PublicationDestination"
    Feature:
      type: object
      properties:
        name:
          type: string
        enabled:
          type: boolean
        limit:
          format: int64
          type: integer
    FlowStep:
      type: object
      properties:
        stepLabel:
          type: string
        stepType:
          $ref: "#/components/schemas/StepType"
        stepDefinitionId:
          $ref: "#/components/schemas/UUID"
        nextStep:
          type: string
        coeId:
          $ref: "#/components/schemas/UUID"
        coe:
          type: string
        taskId:
          $ref: "#/components/schemas/UUID"
        taskStatus:
          $ref: "#/components/schemas/TaskStatusType"
    FolderCreateRequest:
      type: object
      properties:
        path:
          type: string
    FolderDeleteRequest:
      type: object
      properties:
        path:
          type: string
    ForgotPasswordRequest:
      type: object
      properties:
        email:
          type: string
        reason:
          type: string
    GeneratedContent:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        tenantUid:
          $ref: "#/components/schemas/UUID"
        provider:
          type: string
        model:
          type: string
        prompt:
          type: string
        content:
          type: string
        responseTime:
          format: int32
          type: integer
        totalTokens:
          format: int32
          type: integer
        inputTokens:
          format: int32
          type: integer
        outputToken:
          format: int32
          type: integer
        status:
          type: string
        promptDefinitionId:
          $ref: "#/components/schemas/UUID"
        promptName:
          type: string
        promptCategory:
          type: string
        title:
          type: string
        createdBy:
          $ref: "#/components/schemas/UUID"
        createdDate:
          $ref: "#/components/schemas/Date"
    GoodBardsComponent:
      enum:
      - IAM
      - INFRA
      - SETTINGS
      - REFERENTIAL
      - AI
      - BPM
      - CDP
      - DRIVE
      - EMAIL_MARKETING
      - ASSET_MANAGEMENT
      - INTEGRATIONS
      - SOCIAL_MEDIA
      - MARKETING_CAMPAIGNS
      - MARKETING_TOOLS
      type: string
    GoodBardsError:
      type: object
      properties:
        code:
          $ref: "#/components/schemas/GoodBardsErrorCodes"
        component:
          $ref: "#/components/schemas/GoodBardsComponent"
        timestamp:
          $ref: "#/components/schemas/Instant"
        tenantId:
          $ref: "#/components/schemas/UUID"
        userId:
          $ref: "#/components/schemas/UUID"
        params:
          type: array
          items: {}
        service:
          type: string
        location:
          type: string
        message:
          type: string
        exception:
          type: string
    GoodBardsErrorCodes:
      enum:
      - INVALID_LINK
      - INVALID_EMAIL
      - INVALID_STATUS
      - INVALID_DATA
      - INVALID_CHATBOT_CONFIGURATION
      - UNAUTHORIZED
      - USER_NOT_FOUND
      - USER_NOT_ACTIVE
      - USER_NOT_VERIFIED
      - CONTACT_NOT_FOUND
      - FORBIDDEN
      - MAXIMUM_USERS_REACHED
      - SENSITIVE_DATA_NOT_ALLOWED
      - JOB_ALREADY_PROCESSED
      - NOT_FOUND
      - ASSET_NOT_FOUND
      - CAMPAIGN_NOT_FOUND
      - SESSION_NOT_FOUND
      - TENANT_NOT_FOUND
      - USER_INVITATION_NOT_FOUND
      - DESTINATION_NOT_FOUND
      - EMAIL_NOT_FOUND
      - EMAIL_DESIGN_NOT_FOUND
      - EMAIL_CONTENT_NOT_FOUND
      - EMAIL_SETTINGS_NOT_FOUND
      - CDP_SEGMENT_NOT_FOUND
      - DOCUMENT_NOT_FOUND
      - JOB_NOT_FOUND
      - TACTIC_NOT_FOUND
      - SEGMENT_NOT_FOUND
      - PRIVACY_POLICY_NOT_FOUND
      - COMPANY_NOT_FOUND
      - AGENT_NOT_FOUND
      - PROMPT_NOT_FOUND
      - CONFLICT
      - USER_ALREADY_EXISTS
      - EMAIL_ALREADY_EXISTS
      - EXISTING_PENDING_REQUEST
      - USER_ALREADY_IN_TENANT
      - TASK_NOT_LOCKED
      - TASK_ALREADY_LOCKED
      - CODE_ALREADY_EXISTS
      - GENERIC_ERROR
      type: string
    GoodBardsJwtClaims:
      type: object
      properties:
        jti:
          $ref: "#/components/schemas/UUID"
        subject:
          type: string
        upn:
          type: string
        issuer:
          type: string
        uuid:
          type: string
        email:
          type: string
        createdTime:
          $ref: "#/components/schemas/Date"
        expirationTime:
          $ref: "#/components/schemas/Date"
        groups:
          uniqueItems: true
          type: array
          items:
            type: string
        isAdmin:
          type: boolean
        admin:
          type: boolean
    GoodBardsUser:
      type: object
      properties:
        token:
          type: string
        encryptedPassword:
          type: string
        role:
          type: string
        preferredTenant:
          $ref: "#/components/schemas/UUID"
        personalPrompt:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        theme:
          type: string
        language:
          type: string
        country:
          type: string
        claims:
          $ref: "#/components/schemas/GoodBardsJwtClaims"
        tenants:
          type: array
          items:
            $ref: "#/components/schemas/TenantSettings"
        timezone:
          type: string
        activated:
          type: boolean
        validated:
          type: boolean
        twoFactorAuthEnabled:
          type: boolean
        questionedEnabled:
          type: boolean
        question:
          type: string
    GoodBardsUserLight:
      type: object
      properties:
        uuid:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        roles:
          uniqueItems: true
          type: array
          items:
            type: string
    InitVideoExport:
      type: object
      properties:
        title:
          type: string
        videoUrl:
          type: string
        privacyLevel:
          type: string
        source:
          type: string
        disableDuet:
          type: boolean
        disableStitch:
          type: boolean
        disableComment:
          type: boolean
        brandContentToggle:
          type: boolean
        brandOrganicToggle:
          type: boolean
        videoCoverTimestampMs:
          format: int32
          type: integer
        videoSize:
          format: int32
          type: integer
        binaryDataString:
          type: string
    InstagramConfiguration:
      type: object
      properties:
        active:
          type: boolean
        accessToken:
          type: string
        username:
          type: string
        profileUrl:
          type: string
        name:
          type: string
        expireIn:
          type: string
        id:
          type: string
        userId:
          type: string
    Instant:
      format: date-time
      type: string
      example: 2022-03-10T16:15:50Z
    IntegrationDefinition:
      type: object
      properties:
        id:
          type: string
        tactic:
          type: string
        tacticLabel:
          type: string
        url:
          type: string
        logo:
          type: string
        className:
          type: string
        description:
          type: string
        configuration:
          type: array
          items:
            $ref: "#/components/schemas/IntegrationParameter"
        operations:
          type: array
          items:
            $ref: "#/components/schemas/IntegrationOperation"
    IntegrationOperation:
      type: object
      properties:
        method:
          type: string
        description:
          type: string
        parameters:
          type: array
          items:
            $ref: "#/components/schemas/IntegrationParameter"
    IntegrationParameter:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
        type:
          type: string
        required:
          type: boolean
        defaultValue:
          type: string
        description:
          type: string
    InviteAUserRequest:
      required:
      - email
      type: object
      properties:
        email:
          type: string
    LLmSettings:
      type: object
      properties:
        llm:
          type: string
        modelName:
          type: string
        temperature:
          format: double
          type: number
        topK:
          format: int32
          type: integer
        topP:
          format: double
          type: number
        maxTokens:
          format: int32
          type: integer
        maxRetries:
          format: int32
          type: integer
        timeout:
          format: int32
          type: integer
        jsonMode:
          type: boolean
        endpointUrl:
          type: string
        endpointModelName:
          type: string
    LinkRequest:
      type: object
      properties:
        variableUid:
          $ref: "#/components/schemas/UUID"
        documentUid:
          $ref: "#/components/schemas/UUID"
    LinkedInConfiguration:
      type: object
      properties:
        active:
          type: boolean
        accessToken:
          type: string
        expireIn:
          type: string
        idToken:
          type: string
        linkedSub:
          type: string
        username:
          type: string
        profileUrl:
          type: string
        profileEmail:
          type: string
        destinations:
          type: array
          items:
            $ref: "#/components/schemas/PublicationDestination"
    LocalDateTime:
      format: date-time
      type: string
      example: 2022-03-10T12:15:50
    MessageType:
      enum:
      - system
      - user
      - ai
      - tools
      type: string
    MoveFolderRequest:
      type: object
      properties:
        sourcePath:
          type: string
        destinationPath:
          type: string
    MoveRequest:
      type: object
      properties:
        path:
          type: string
    ObjectMap:
      type: object
      additionalProperties: {}
    ParameterDefinition:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        label:
          type: string
        defaultValue:
          type: string
        dataType:
          type: string
        required:
          type: boolean
        multiValued:
          type: boolean
    ParameterDefinition1:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        label:
          type: string
        defaultValue:
          type: string
        dataType:
          type: string
        required:
          type: boolean
        multiValued:
          type: boolean
    ParameterDefinition2:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        label:
          type: string
        defaultValue:
          type: string
        dataType:
          type: string
        multiValued:
          type: boolean
        groupName:
          type: string
        groupPosition:
          format: int32
          type: integer
        paramPosition:
          format: int32
          type: integer
        referenceList:
          $ref: "#/components/schemas/ReferenceList"
        enumeration:
          type: array
          items:
            type: string
        constraints:
          $ref: "#/components/schemas/Constraints"
    PipeDriveConfiguration:
      type: object
      properties:
        active:
          type: boolean
        accessToken:
          type: string
        username:
          type: string
        profileUrl:
          type: string
        tenantName:
          type: string
        companyName:
          type: string
    PressRelease:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        ceoName:
          type: string
        ceoJobTitle:
          type: string
        boilerplate1:
          type: string
        boilerplate2:
          type: string
        boilerplate3:
          type: string
        contactName:
          type: string
        contactJobTitle:
          type: string
        contactEmail:
          type: string
    ProcessDefinition:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
        version:
          format: int32
          type: integer
        description:
          type: string
        createdBy:
          $ref: "#/components/schemas/UserDefinition"
        creationDate:
          $ref: "#/components/schemas/LocalDateTime"
        lastModifiedBy:
          $ref: "#/components/schemas/UserDefinition"
        lastModifiedDate:
          $ref: "#/components/schemas/LocalDateTime"
        params:
          type: array
          items:
            $ref: "#/components/schemas/ParameterDefinition"
        steps:
          type: array
          items:
            $ref: "#/components/schemas/FlowStep"
    ProcessStatusType:
      enum:
      - CREATED
      - STARTED
      - IN_PROGRESS
      - ON_HOLD
      - CANCELLED
      - COMPLETED
      - ERROR
      type: string
    ProcessSummary:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
        createdDate:
          $ref: "#/components/schemas/Date"
        businessKey:
          type: string
        status:
          $ref: "#/components/schemas/ProcessStatusType"
        processDefinitionUid:
          $ref: "#/components/schemas/UUID"
    Product:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
        description:
          type: string
        website:
          type: string
        keywords:
          type: array
          items:
            type: string
    PromptDefinition:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        label:
          type: string
        description:
          type: string
        category:
          type: string
        display:
          type: boolean
        locked:
          type: boolean
        tacticCode:
          type: string
        tacticLabel:
          type: string
        systemPrompt:
          type: string
        userPrompt:
          type: string
        llm:
          type: string
        modelName:
          type: string
        temperature:
          format: double
          type: number
        maxTokens:
          format: int32
          type: integer
        variables:
          type: array
          items:
            $ref: "#/components/schemas/PromptVariable"
    PromptVariable:
      type: object
      properties:
        code:
          type: string
        fieldType:
          $ref: "#/components/schemas/PromptVariableType"
        referenceList:
          type: string
        directive:
          type: string
        description:
          type: string
        settings:
          type: boolean
        global:
          type: boolean
        promptDefinitionUid:
          $ref: "#/components/schemas/UUID"
        defaultValue:
          type: string
        readOnly:
          type: boolean
    PromptVariableDefinition:
      type: object
      properties:
        code:
          type: string
        fieldType:
          $ref: "#/components/schemas/PromptVariableType"
        referenceList:
          type: string
        directive:
          type: string
        description:
          type: string
        settings:
          type: boolean
        global:
          type: boolean
    PromptVariableType:
      enum:
      - text
      - textarea
      - select
      - checkbox
      - date
      - number
      type: string
    PublicationDestination:
      type: object
      properties:
        accountId:
          type: string
        accountType:
          type: string
        destinationName:
          type: string
        destinationType:
          type: string
        destinationId:
          type: string
    PublicationRequest:
      type: object
      properties:
        accountId:
          type: string
        accountType:
          type: string
        destinationName:
          type: string
        destinationType:
          type: string
        destinationId:
          type: string
        assetVersion:
          format: int32
          type: integer
    PublishId:
      type: object
      properties:
        publish_id:
          type: string
    PublisherString:
      type: object
    QRCodeRequest:
      type: object
      properties:
        url:
          type: string
        width:
          format: int32
          type: integer
        height:
          format: int32
          type: integer
    QueueSummary:
      type: object
      properties:
        label:
          type: string
        id:
          type: string
        pendingTaskCount:
          format: int32
          type: integer
    RecommendVariableRequest:
      type: object
      properties:
        value:
          type: string
    ReferenceList:
      type: object
      properties:
        url:
          type: string
        filterUrlParam:
          type: string
        filterParamUidToReadValue:
          $ref: "#/components/schemas/UUID"
    ReferentialAssetType:
      type: object
      properties:
        code:
          type: string
        name:
          type: string
        tactic:
          type: string
    ReferentialCity:
      type: object
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
        country:
          type: string
        region:
          type: string
    ReferentialEntry:
      type: object
      properties:
        code:
          type: string
        name:
          type: string
    RenameRequest:
      type: object
      properties:
        newName:
          type: string
    RenameRequest1:
      type: object
      properties:
        newName:
          type: string
    SaveTiktokConfig:
      type: object
      properties:
        authorizationCode:
          type: string
    ScheduleRequest:
      type: object
      properties:
        scheduledDate:
          type: string
        scheduledTime:
          type: string
        destination:
          $ref: "#/components/schemas/PublicationDestination"
        assetVersion:
          format: int32
          type: integer
    ShareRequest:
      type: object
      properties:
        destinationExpirationDate:
          $ref: "#/components/schemas/Date"
        destinationTenants:
          type: array
          items:
            format: uuid
            pattern: "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
            type: string
        destinationFolder:
          type: string
        assetVersion:
          format: int32
          type: integer
    ShortenedUrl:
      type: object
      properties:
        code:
          type: string
        createdDate:
          $ref: "#/components/schemas/Date"
        createdBy:
          type: string
        destinationUrl:
          type: string
        title:
          type: string
        utmSource:
          type: string
        utmMedium:
          type: string
        utmCampaign:
          type: string
        utmContent:
          type: string
        utmTerm:
          type: string
        campaignUid:
          $ref: "#/components/schemas/UUID"
        tacticUid:
          $ref: "#/components/schemas/UUID"
        assetUid:
          $ref: "#/components/schemas/UUID"
        clicks:
          format: int64
          type: integer
        deadLink:
          type: boolean
        qrEnabled:
          type: boolean
    ShortenedUrlRequest:
      type: object
      properties:
        tenantUid:
          $ref: "#/components/schemas/UUID"
        createdBy:
          $ref: "#/components/schemas/UUID"
        destinationUrl:
          type: string
        title:
          type: string
        utmSource:
          type: string
        utmMedium:
          type: string
        utmCampaign:
          type: string
        utmContent:
          type: string
        utmTerm:
          type: string
        campaignUid:
          $ref: "#/components/schemas/UUID"
        tacticUid:
          $ref: "#/components/schemas/UUID"
        assetUid:
          $ref: "#/components/schemas/UUID"
        qrEnabled:
          type: boolean
    StartProcessRequest:
      type: object
      properties:
        processDefinitionUid:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
        businessKey:
          type: string
        params:
          uniqueItems: true
          type: array
          items:
            $ref: "#/components/schemas/VariableCreationRequest"
    StepDefinition:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
        stepType:
          type: string
        previous:
          type: string
        previous_uid:
          $ref: "#/components/schemas/UUID"
        next:
          type: string
        next_uid:
          $ref: "#/components/schemas/UUID"
        parameters:
          type: array
          items:
            $ref: "#/components/schemas/ParameterDefinition1"
    StepType:
      enum:
      - GATEWAY
      - USER
      - SCRIPT
      - START
      - END
      type: string
    Tactic:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        caseId:
          $ref: "#/components/schemas/UUID"
        tacticCode:
          type: string
        utmCode:
          type: string
        name:
          type: string
        budget:
          format: double
          type: number
        description:
          type: string
        publishedDate:
          $ref: "#/components/schemas/Date"
        endDate:
          $ref: "#/components/schemas/Date"
        createdBy:
          type: string
        createdByName:
          type: string
        createdDate:
          $ref: "#/components/schemas/Date"
        status:
          type: string
        completedDate:
          $ref: "#/components/schemas/Date"
        suspendedDate:
          $ref: "#/components/schemas/Date"
        destinations:
          type: array
          items:
            $ref: "#/components/schemas/PublicationDestination"
    TaskStatusType:
      enum:
      - PENDING
      - LOCKED
      - COMPLETED
      - CANCELLED
      - FAILED
      type: string
    TaskVariable:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        parameterDefinitionUid:
          $ref: "#/components/schemas/UUID"
        value:
          type: string
        name:
          type: string
        type:
          type: string
        multivalued:
          type: boolean
        required:
          type: boolean
        location:
          type: string
        permission:
          type: string
    TelegramConfiguration:
      type: object
      properties:
        active:
          type: boolean
        accessToken:
          type: string
        username:
          type: string
        profileUrl:
          type: string
        phoneNumber:
          type: string
    TenantDefinition:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        label:
          type: string
    TenantSettings:
      type: object
      properties:
        tenantUid:
          type: string
        tenantName:
          type: string
        tenantDescription:
          type: string
        tenantTier:
          type: string
        expirationDate:
          $ref: "#/components/schemas/Instant"
        parentTenant:
          $ref: "#/components/schemas/TenantSummary"
        childTenants:
          type: array
          items:
            $ref: "#/components/schemas/TenantSummary"
        roles:
          uniqueItems: true
          type: array
          items:
            type: string
        permissions:
          uniqueItems: true
          type: array
          items:
            type: string
        queues:
          type: array
          items:
            $ref: "#/components/schemas/QueueSummary"
        features:
          type: array
          items:
            $ref: "#/components/schemas/Feature"
        providerText:
          type: string
        modelText:
          type: string
        providerImage:
          type: string
        modelImage:
          type: string
        providerChatAssistant:
          type: string
        modelChatAssistant:
          type: string
        promptChatAssistant:
          $ref: "#/components/schemas/UUID"
        timezone:
          type: string
        maxUsers:
          format: int32
          type: integer
        chatbotAgent:
          $ref: "#/components/schemas/UUID"
        chatbotWelcomeMessage:
          type: string
        chatbotLanguage:
          type: string
        chatbotTheme:
          type: string
        chatbotLogo:
          type: string
        chatbotLabel:
          type: string
        chatbotFontSize:
          type: string
        chatbotCss:
          type: string
    TenantSettingsUpdateRequest:
      type: object
      properties:
        providerText:
          type: string
        modelText:
          type: string
        providerImage:
          type: string
        modelImage:
          type: string
        providerChatAssistant:
          type: string
        modelChatAssistant:
          type: string
        promptChatAssistant:
          $ref: "#/components/schemas/UUID"
        timezone:
          type: string
        chatbotAgent:
          $ref: "#/components/schemas/UUID"
        chatbotWelcomeMessage:
          type: string
        chatbotLanguage:
          type: string
        chatbotTheme:
          type: string
        chatbotLogo:
          type: string
        chatbotLabel:
          type: string
        chatbotFontSize:
          type: string
        chatbotCss:
          type: string
    TenantShared:
      type: object
      properties:
        publishDate:
          $ref: "#/components/schemas/Date"
        tenantUid:
          $ref: "#/components/schemas/UUID"
    TenantSummary:
      type: object
      properties:
        tenantId:
          $ref: "#/components/schemas/UUID"
        tenantName:
          type: string
    ToolSettings:
      type: object
      properties:
        rag:
          type: boolean
        webSearch:
          type: boolean
        tools:
          type: array
          items:
            type: string
    TwitterConfiguration:
      type: object
      properties:
        active:
          type: boolean
        accessToken:
          type: string
        username:
          type: string
        profileUrl:
          type: string
        refresh:
          type: string
        accessTokenSecret:
          type: string
    UUID:
      format: uuid
      pattern: "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
      type: string
    UpdateAccountSettingsRequest:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        role:
          type: string
        language:
          type: string
        country:
          type: string
        personalPrompt:
          type: string
        preferredTenant:
          $ref: "#/components/schemas/UUID"
        theme:
          type: string
        timezone:
          type: string
        twoFactorAuthEnabled:
          type: boolean
    UpdateAssetContentRequest:
      type: object
      properties:
        content:
          type: string
    UpdateAvatarRequest:
      type: object
      properties:
        avatar:
          type: string
    UpdateRolesAndPermissionsUserRequest:
      type: object
      properties:
        roles:
          type: array
          items:
            type: string
        permissions:
          type: array
          items:
            type: string
    UpsertPromptRequest:
      type: object
      properties:
        prompt:
          $ref: "#/components/schemas/PromptDefinition"
        language:
          type: string
    UserActions:
      enum:
      - REGISTRATION
      - INVITE_USER
      - RESET_PASSWORD
      - CHANGE_EMAIL
      - LOGIN_2FA
      - PROTECT_PASSWORD_QUESTION
      type: string
    UserDefinition:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        email:
          type: string
    UserPendingActionEntity:
      type: object
      properties:
        actionUid:
          $ref: "#/components/schemas/UUID"
        userUid:
          $ref: "#/components/schemas/UUID"
        tenantUid:
          $ref: "#/components/schemas/UUID"
        action:
          $ref: "#/components/schemas/UserActions"
        actionCreation:
          $ref: "#/components/schemas/Instant"
        actionDeadline:
          $ref: "#/components/schemas/Instant"
        verificationCode:
          type: string
        useCount:
          format: int32
          type: integer
        params:
          type: object
          additionalProperties:
            type: string
    UserRegistrationRequest:
      type: object
      properties:
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
    UserTenant:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        roles:
          uniqueItems: true
          type: array
          items:
            type: string
        permissions:
          uniqueItems: true
          type: array
          items:
            type: string
    VariableCreationRequest:
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UUID"
        value:
          type: string
    WSAiSessionEvent:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        type:
          $ref: "#/components/schemas/AiSessionWSTypes"
        message:
          type: string
        llmSettings:
          $ref: "#/components/schemas/LLmSettings"
        toolsSettings:
          $ref: "#/components/schemas/ToolSettings"
    WSEventNotification:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        read:
          type: boolean
        type:
          $ref: "#/components/schemas/WSEventTypes"
        message:
          type: string
        timestamp:
          type: string
        title:
          type: string
    WSEventTypes:
      enum:
      - error
      - alert
      - warning
      - info
      - success
      type: string
    WordpressConfiguration:
      type: object
      properties:
        active:
          type: boolean
        accessToken:
          type: string
        profileUrl:
          type: string
        username:
          type: string
        password:
          type: string
        url:
          type: string
        importDate:
          $ref: "#/components/schemas/Date"
    WordpressDotComConfiguration:
      type: object
      properties:
        active:
          type: boolean
        username:
          type: string
        profileUrl:
          type: string
        accessToken:
          type: string
        blogId:
          type: string
        blogUrl:
          type: string
  securitySchemes:
    SecurityScheme:
      type: http
      description: Authentication
      scheme: bearer
      bearerFormat: JWT
